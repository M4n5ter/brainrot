// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: makabaka.proto

package makabaka

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SighUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Email        string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Password     string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	AvatarUrl    string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Introduction string `protobuf:"bytes,5,opt,name=introduction,proto3" json:"introduction,omitempty"`
	ProfileInfo  string `protobuf:"bytes,6,opt,name=profile_info,json=profileInfo,proto3" json:"profile_info,omitempty"` // Should be a valid JSON string
}

func (x *SighUpRequest) Reset() {
	*x = SighUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_makabaka_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SighUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SighUpRequest) ProtoMessage() {}

func (x *SighUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_makabaka_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SighUpRequest.ProtoReflect.Descriptor instead.
func (*SighUpRequest) Descriptor() ([]byte, []int) {
	return file_makabaka_proto_rawDescGZIP(), []int{0}
}

func (x *SighUpRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SighUpRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SighUpRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SighUpRequest) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *SighUpRequest) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *SighUpRequest) GetProfileInfo() string {
	if x != nil {
		return x.ProfileInfo
	}
	return ""
}

type SighUpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *SighUpResponse) Reset() {
	*x = SighUpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_makabaka_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SighUpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SighUpResponse) ProtoMessage() {}

func (x *SighUpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_makabaka_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SighUpResponse.ProtoReflect.Descriptor instead.
func (*SighUpResponse) Descriptor() ([]byte, []int) {
	return file_makabaka_proto_rawDescGZIP(), []int{1}
}

func (x *SighUpResponse) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type SighInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SighInRequest) Reset() {
	*x = SighInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_makabaka_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SighInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SighInRequest) ProtoMessage() {}

func (x *SighInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_makabaka_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SighInRequest.ProtoReflect.Descriptor instead.
func (*SighInRequest) Descriptor() ([]byte, []int) {
	return file_makabaka_proto_rawDescGZIP(), []int{2}
}

func (x *SighInRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SighInRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SighInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	AvatarUrl    string `protobuf:"bytes,2,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	MacId        string `protobuf:"bytes,3,opt,name=mac_id,json=macId,proto3" json:"mac_id,omitempty"`
	MacKey       string `protobuf:"bytes,4,opt,name=mac_key,json=macKey,proto3" json:"mac_key,omitempty"`
	MacAlgorithm string `protobuf:"bytes,5,opt,name=mac_algorithm,json=macAlgorithm,proto3" json:"mac_algorithm,omitempty"`
	RefreshToken string `protobuf:"bytes,6,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *SighInResponse) Reset() {
	*x = SighInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_makabaka_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SighInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SighInResponse) ProtoMessage() {}

func (x *SighInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_makabaka_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SighInResponse.ProtoReflect.Descriptor instead.
func (*SighInResponse) Descriptor() ([]byte, []int) {
	return file_makabaka_proto_rawDescGZIP(), []int{3}
}

func (x *SighInResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SighInResponse) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *SighInResponse) GetMacId() string {
	if x != nil {
		return x.MacId
	}
	return ""
}

func (x *SighInResponse) GetMacKey() string {
	if x != nil {
		return x.MacKey
	}
	return ""
}

func (x *SighInResponse) GetMacAlgorithm() string {
	if x != nil {
		return x.MacAlgorithm
	}
	return ""
}

func (x *SighInResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type RefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *RefreshTokenRequest) Reset() {
	*x = RefreshTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_makabaka_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenRequest) ProtoMessage() {}

func (x *RefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_makabaka_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_makabaka_proto_rawDescGZIP(), []int{4}
}

func (x *RefreshTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type RefreshTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacId        string `protobuf:"bytes,3,opt,name=mac_id,json=macId,proto3" json:"mac_id,omitempty"`
	MacKey       string `protobuf:"bytes,4,opt,name=mac_key,json=macKey,proto3" json:"mac_key,omitempty"`
	MacAlgorithm string `protobuf:"bytes,5,opt,name=mac_algorithm,json=macAlgorithm,proto3" json:"mac_algorithm,omitempty"`
	RefreshToken string `protobuf:"bytes,6,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *RefreshTokenResponse) Reset() {
	*x = RefreshTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_makabaka_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenResponse) ProtoMessage() {}

func (x *RefreshTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_makabaka_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenResponse.ProtoReflect.Descriptor instead.
func (*RefreshTokenResponse) Descriptor() ([]byte, []int) {
	return file_makabaka_proto_rawDescGZIP(), []int{5}
}

func (x *RefreshTokenResponse) GetMacId() string {
	if x != nil {
		return x.MacId
	}
	return ""
}

func (x *RefreshTokenResponse) GetMacKey() string {
	if x != nil {
		return x.MacKey
	}
	return ""
}

func (x *RefreshTokenResponse) GetMacAlgorithm() string {
	if x != nil {
		return x.MacAlgorithm
	}
	return ""
}

func (x *RefreshTokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type PostArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Tags    []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *PostArticleRequest) Reset() {
	*x = PostArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_makabaka_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostArticleRequest) ProtoMessage() {}

func (x *PostArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_makabaka_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostArticleRequest.ProtoReflect.Descriptor instead.
func (*PostArticleRequest) Descriptor() ([]byte, []int) {
	return file_makabaka_proto_rawDescGZIP(), []int{6}
}

func (x *PostArticleRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PostArticleRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *PostArticleRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type PostArticleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId int64 `protobuf:"varint,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
}

func (x *PostArticleResponse) Reset() {
	*x = PostArticleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_makabaka_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostArticleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostArticleResponse) ProtoMessage() {}

func (x *PostArticleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_makabaka_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostArticleResponse.ProtoReflect.Descriptor instead.
func (*PostArticleResponse) Descriptor() ([]byte, []int) {
	return file_makabaka_proto_rawDescGZIP(), []int{7}
}

func (x *PostArticleResponse) GetArticleId() int64 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

type DeleteArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId int64 `protobuf:"varint,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
}

func (x *DeleteArticleRequest) Reset() {
	*x = DeleteArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_makabaka_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArticleRequest) ProtoMessage() {}

func (x *DeleteArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_makabaka_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArticleRequest.ProtoReflect.Descriptor instead.
func (*DeleteArticleRequest) Descriptor() ([]byte, []int) {
	return file_makabaka_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteArticleRequest) GetArticleId() int64 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

type DeleteArticleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteArticleResponse) Reset() {
	*x = DeleteArticleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_makabaka_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteArticleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArticleResponse) ProtoMessage() {}

func (x *DeleteArticleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_makabaka_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArticleResponse.ProtoReflect.Descriptor instead.
func (*DeleteArticleResponse) Descriptor() ([]byte, []int) {
	return file_makabaka_proto_rawDescGZIP(), []int{9}
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_makabaka_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_makabaka_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_makabaka_proto_rawDescGZIP(), []int{10}
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_makabaka_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_makabaka_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_makabaka_proto_rawDescGZIP(), []int{11}
}

// API error
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_makabaka_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_makabaka_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_makabaka_proto_rawDescGZIP(), []int{12}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_makabaka_proto protoreflect.FileDescriptor

var file_makabaka_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x02, 0x0a, 0x0d,
	0x53, 0x69, 0x67, 0x68, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x3a, 0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0x32, 0x15, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0xd2,
	0x01, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0xd2, 0x01, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x9a, 0x02, 0x01,
	0x06, 0x22, 0x81, 0x01, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x68, 0x55, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x3a, 0x56, 0x92,
	0x41, 0x53, 0x0a, 0x51, 0x32, 0x15, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0xb3, 0xa8, 0xe5,
	0x86, 0x8c, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe4, 0xbd, 0x93, 0x4a, 0x34, 0x7b, 0x22, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x6f, 0x6b, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x3a, 0x20, 0x7b, 0x22, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x31, 0x7d,
	0x7d, 0x9a, 0x02, 0x01, 0x06, 0x22, 0x76, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x68, 0x49, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x33, 0x92, 0x41, 0x30, 0x0a, 0x2e, 0x32,
	0x15, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe8, 0xaf, 0xb7,
	0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0xd2, 0x01, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0xd2, 0x01,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x9a, 0x02, 0x01, 0x06, 0x22, 0xc8, 0x03,
	0x0a, 0x0e, 0x53, 0x69, 0x67, 0x68, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x61, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x63,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x80, 0x02, 0x92, 0x41, 0xfc, 0x01, 0x0a, 0xf9, 0x01, 0x32,
	0x15, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe5, 0x93, 0x8d,
	0xe5, 0xba, 0x94, 0xe4, 0xbd, 0x93, 0x4a, 0xdb, 0x01, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x3a, 0x20, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20,
	0x22, 0x6f, 0x6b, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x7b, 0x22,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x6d, 0x34, 0x6e, 0x35,
	0x74, 0x65, 0x72, 0x22, 0x2c, 0x20, 0x22, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x22, 0x3a, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e,
	0x6a, 0x70, 0x67, 0x22, 0x2c, 0x20, 0x22, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x20,
	0x22, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x64, 0x22, 0x2c, 0x20, 0x22, 0x6d, 0x61, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x6d, 0x61, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x2c, 0x20,
	0x22, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x3a,
	0x20, 0x22, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22,
	0x2c, 0x20, 0x22, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x3a, 0x20, 0x22, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x7d, 0x7d, 0x9a, 0x02, 0x01, 0x06, 0x22, 0x6c, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0x30, 0x92, 0x41, 0x2d, 0x0a, 0x2b, 0x32, 0x15, 0xe5, 0x88, 0xb7,
	0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4,
	0xbd, 0x93, 0xd2, 0x01, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x9a, 0x02, 0x01, 0x06, 0x22, 0xcc, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x61, 0x63, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a, 0xb9, 0x01, 0x92, 0x41, 0xb5, 0x01,
	0x0a, 0xb2, 0x01, 0x32, 0x15, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89,
	0x8c, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe4, 0xbd, 0x93, 0x4a, 0x94, 0x01, 0x7b, 0x22, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x3a, 0x20, 0x22, 0x6f, 0x6b, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x3a, 0x20, 0x7b, 0x22, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x6d, 0x61,
	0x63, 0x5f, 0x69, 0x64, 0x22, 0x2c, 0x20, 0x22, 0x6d, 0x61, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x22,
	0x3a, 0x20, 0x22, 0x6d, 0x61, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x2c, 0x20, 0x22, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x3a, 0x20, 0x22, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x2c, 0x20, 0x22,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3a, 0x20,
	0x22, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7d,
	0x7d, 0x9a, 0x02, 0x01, 0x06, 0x22, 0x58, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22,
	0x34, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x5e, 0x0a, 0x04, 0x50,
	0x69, 0x6e, 0x67, 0x12, 0x56, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x2e, 0x6d, 0x61,
	0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61,
	0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2f, 0x70, 0x69, 0x6e, 0x67, 0x32, 0x8a, 0x07, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x12, 0xab, 0x02, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x68, 0x55, 0x70, 0x12,
	0x1a, 0x2e, 0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x68, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x61,
	0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x68, 0x55, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe7, 0x01, 0x92, 0x41, 0xbf, 0x01, 0x12,
	0x21, 0xe5, 0xb0, 0x86, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe5, 0x88, 0xb0, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5,
	0xba, 0x93, 0x4a, 0x36, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x2f, 0x0a, 0x0c, 0xe6, 0xb3, 0xa8,
	0xe5, 0x86, 0x8c, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x12, 0x1f, 0x0a, 0x1d, 0x1a, 0x1b, 0x2e,
	0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x68,
	0x55, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x30, 0x0a, 0x03, 0x34, 0x32,
	0x32, 0x12, 0x29, 0x0a, 0x0f, 0xe5, 0xae, 0xa2, 0xe6, 0x88, 0xb7, 0xe7, 0xab, 0xaf, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x6b, 0x61, 0x62,
	0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4a, 0x30, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x29, 0x0a, 0x0f, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x99, 0xa8,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x6b,
	0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6b,
	0x61, 0x62, 0x61, 0x6b, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x69, 0x67, 0x68, 0x2d,
	0x75, 0x70, 0x12, 0x96, 0x02, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x68, 0x49, 0x6e, 0x12, 0x1a, 0x2e,
	0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x68,
	0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x6b, 0x61,
	0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x68, 0x49, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd2, 0x01, 0x92, 0x41, 0xaa, 0x01, 0x12, 0x0c, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0x4a, 0x36, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x2f, 0x0a, 0x0c, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe6, 0x88, 0x90, 0xe5,
	0x8a, 0x9f, 0x12, 0x1f, 0x0a, 0x1d, 0x1a, 0x1b, 0x2e, 0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x68, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4a, 0x30, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x29, 0x0a, 0x0f, 0xe5, 0xae,
	0xa2, 0xe6, 0x88, 0xb7, 0xe7, 0xab, 0xaf, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0x12, 0x16, 0x0a,
	0x14, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4a, 0x30, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x29, 0x0a, 0x0f,
	0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x99, 0xa8, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0x12,
	0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a,
	0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x73, 0x69, 0x67, 0x68, 0x2d, 0x69, 0x6e, 0x12, 0xba, 0x02, 0x0a, 0x0c,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x2e, 0x6d,
	0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xe4, 0x01, 0x92, 0x41, 0xb6, 0x01, 0x12, 0x0c, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0,
	0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0x4a, 0x42, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3b, 0x0a,
	0x12, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe6, 0x88, 0x90,
	0xe5, 0x8a, 0x9f, 0x12, 0x25, 0x0a, 0x23, 0x1a, 0x21, 0x2e, 0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61,
	0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x30, 0x0a, 0x03, 0x34, 0x32,
	0x32, 0x12, 0x29, 0x0a, 0x0f, 0xe5, 0xae, 0xa2, 0xe6, 0x88, 0xb7, 0xe7, 0xab, 0xaf, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x6b, 0x61, 0x62,
	0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4a, 0x30, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x29, 0x0a, 0x0f, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x99, 0xa8,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x6b,
	0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6b,
	0x61, 0x62, 0x61, 0x6b, 0x61, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0xf9, 0x04, 0x0a, 0x07, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0xb0, 0x02, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdd, 0x01, 0x92, 0x41, 0xb5, 0x01, 0x12, 0x12,
	0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe4, 0xb8, 0x80, 0xe7, 0xaf, 0x87, 0xe6, 0x96, 0x87, 0xe7,
	0xab, 0xa0, 0x4a, 0x3b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x34, 0x0a, 0x0c, 0xe5, 0x8f, 0x91,
	0xe5, 0xb8, 0x83, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x12, 0x24, 0x0a, 0x22, 0x1a, 0x20, 0x2e,
	0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a,
	0x30, 0x0a, 0x03, 0x34, 0x32, 0x32, 0x12, 0x29, 0x0a, 0x0f, 0xe5, 0xae, 0xa2, 0xe6, 0x88, 0xb7,
	0xe7, 0xab, 0xaf, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e,
	0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x4a, 0x30, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x29, 0x0a, 0x0f, 0xe6, 0x9c, 0x8d, 0xe5,
	0x8a, 0xa1, 0xe5, 0x99, 0xa8, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0x12, 0x16, 0x0a, 0x14, 0x1a,
	0x12, 0x2e, 0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x12, 0xba, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x61, 0x6b, 0x61,
	0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6d,
	0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xe1, 0x01, 0x92, 0x41, 0xb7, 0x01, 0x12, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe4,
	0xb8, 0x80, 0xe7, 0xaf, 0x87, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0x4a, 0x3d, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x36, 0x0a, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x88, 0x90, 0xe5,
	0x8a, 0x9f, 0x12, 0x26, 0x0a, 0x24, 0x1a, 0x22, 0x2e, 0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x30, 0x0a, 0x03, 0x34, 0x32,
	0x32, 0x12, 0x29, 0x0a, 0x0f, 0xe5, 0xae, 0xa2, 0xe6, 0x88, 0xb7, 0xe7, 0xab, 0xaf, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x6b, 0x61, 0x62,
	0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4a, 0x30, 0x0a, 0x03,
	0x35, 0x30, 0x30, 0x12, 0x29, 0x0a, 0x0f, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0xe5, 0x99, 0xa8,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0x12, 0x16, 0x0a, 0x14, 0x1a, 0x12, 0x2e, 0x6d, 0x61, 0x6b,
	0x61, 0x62, 0x61, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x6b,
	0x61, 0x62, 0x61, 0x6b, 0x61, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x42, 0x9c, 0x02, 0x92, 0x41, 0x8c, 0x02, 0x12, 0x9a, 0x01, 0x0a, 0x0c,
	0x4d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x20, 0x41, 0x50, 0x49, 0x12, 0x17, 0x4d, 0x34,
	0x6e, 0x35, 0x74, 0x65, 0x72, 0x20, 0xe7, 0x9a, 0x84, 0xe7, 0xac, 0x94, 0xe8, 0xae, 0xb0, 0xe6,
	0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x22, 0x3a, 0x0a, 0x07, 0x4d, 0x34, 0x6e, 0x35, 0x74, 0x65, 0x72,
	0x12, 0x1a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d, 0x34, 0x6e, 0x35, 0x74, 0x65, 0x72, 0x1a, 0x13, 0x6d, 0x34,
	0x6e, 0x35, 0x74, 0x65, 0x72, 0x72, 0x72, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f,
	0x6d, 0x2a, 0x2f, 0x0a, 0x17, 0xe6, 0x9c, 0xaa, 0xe5, 0xbc, 0x80, 0xe6, 0x99, 0xba, 0xe9, 0x80,
	0x89, 0xe6, 0x89, 0x8b, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x74, 0x2e, 0x6d, 0x65, 0x2f, 0x4d, 0x34, 0x6e, 0x35, 0x74,
	0x65, 0x72, 0x32, 0x04, 0x76, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x5a, 0x45, 0x0a, 0x43, 0x0a, 0x11, 0x6d, 0x61, 0x6b, 0x61, 0x62, 0x61, 0x6b, 0x61, 0x20, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x08, 0x03, 0x28, 0x04, 0x42, 0x28, 0x0a,
	0x0b, 0x0a, 0x01, 0x52, 0x12, 0x06, 0xe5, 0x8f, 0xaa, 0xe8, 0xaf, 0xbb, 0x0a, 0x0c, 0x0a, 0x02,
	0x52, 0x57, 0x12, 0x06, 0xe8, 0xaf, 0xbb, 0xe5, 0x86, 0x99, 0x0a, 0x0b, 0x0a, 0x01, 0x57, 0x12,
	0x06, 0xe5, 0x8f, 0xaa, 0xe5, 0x86, 0x99, 0x5a, 0x0a, 0x2e, 0x2f, 0x6d, 0x61, 0x6b, 0x61, 0x62,
	0x61, 0x6b, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_makabaka_proto_rawDescOnce sync.Once
	file_makabaka_proto_rawDescData = file_makabaka_proto_rawDesc
)

func file_makabaka_proto_rawDescGZIP() []byte {
	file_makabaka_proto_rawDescOnce.Do(func() {
		file_makabaka_proto_rawDescData = protoimpl.X.CompressGZIP(file_makabaka_proto_rawDescData)
	})
	return file_makabaka_proto_rawDescData
}

var file_makabaka_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_makabaka_proto_goTypes = []any{
	(*SighUpRequest)(nil),         // 0: makabaka.v1.SighUpRequest
	(*SighUpResponse)(nil),        // 1: makabaka.v1.SighUpResponse
	(*SighInRequest)(nil),         // 2: makabaka.v1.SighInRequest
	(*SighInResponse)(nil),        // 3: makabaka.v1.SighInResponse
	(*RefreshTokenRequest)(nil),   // 4: makabaka.v1.RefreshTokenRequest
	(*RefreshTokenResponse)(nil),  // 5: makabaka.v1.RefreshTokenResponse
	(*PostArticleRequest)(nil),    // 6: makabaka.v1.PostArticleRequest
	(*PostArticleResponse)(nil),   // 7: makabaka.v1.PostArticleResponse
	(*DeleteArticleRequest)(nil),  // 8: makabaka.v1.DeleteArticleRequest
	(*DeleteArticleResponse)(nil), // 9: makabaka.v1.DeleteArticleResponse
	(*PingRequest)(nil),           // 10: makabaka.v1.PingRequest
	(*PingResponse)(nil),          // 11: makabaka.v1.PingResponse
	(*Error)(nil),                 // 12: makabaka.v1.Error
}
var file_makabaka_proto_depIdxs = []int32{
	10, // 0: makabaka.v1.Ping.Ping:input_type -> makabaka.v1.PingRequest
	0,  // 1: makabaka.v1.User.SighUp:input_type -> makabaka.v1.SighUpRequest
	2,  // 2: makabaka.v1.User.SighIn:input_type -> makabaka.v1.SighInRequest
	4,  // 3: makabaka.v1.User.RefreshToken:input_type -> makabaka.v1.RefreshTokenRequest
	6,  // 4: makabaka.v1.Article.PostArticle:input_type -> makabaka.v1.PostArticleRequest
	8,  // 5: makabaka.v1.Article.DeleteArticle:input_type -> makabaka.v1.DeleteArticleRequest
	11, // 6: makabaka.v1.Ping.Ping:output_type -> makabaka.v1.PingResponse
	1,  // 7: makabaka.v1.User.SighUp:output_type -> makabaka.v1.SighUpResponse
	3,  // 8: makabaka.v1.User.SighIn:output_type -> makabaka.v1.SighInResponse
	5,  // 9: makabaka.v1.User.RefreshToken:output_type -> makabaka.v1.RefreshTokenResponse
	7,  // 10: makabaka.v1.Article.PostArticle:output_type -> makabaka.v1.PostArticleResponse
	9,  // 11: makabaka.v1.Article.DeleteArticle:output_type -> makabaka.v1.DeleteArticleResponse
	6,  // [6:12] is the sub-list for method output_type
	0,  // [0:6] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_makabaka_proto_init() }
func file_makabaka_proto_init() {
	if File_makabaka_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_makabaka_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SighUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_makabaka_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SighUpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_makabaka_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SighInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_makabaka_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SighInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_makabaka_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_makabaka_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_makabaka_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PostArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_makabaka_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PostArticleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_makabaka_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_makabaka_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteArticleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_makabaka_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_makabaka_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_makabaka_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_makabaka_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_makabaka_proto_goTypes,
		DependencyIndexes: file_makabaka_proto_depIdxs,
		MessageInfos:      file_makabaka_proto_msgTypes,
	}.Build()
	File_makabaka_proto = out.File
	file_makabaka_proto_rawDesc = nil
	file_makabaka_proto_goTypes = nil
	file_makabaka_proto_depIdxs = nil
}
