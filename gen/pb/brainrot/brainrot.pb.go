// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: brainrot.proto

package brainrot

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SignUpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Email        string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Password     string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	AvatarUrl    string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Introduction string `protobuf:"bytes,5,opt,name=introduction,proto3" json:"introduction,omitempty"`
	ProfileInfo  string `protobuf:"bytes,6,opt,name=profile_info,json=profileInfo,proto3" json:"profile_info,omitempty"` // Should be a valid JSON string
}

func (x *SignUpRequest) Reset() {
	*x = SignUpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUpRequest) ProtoMessage() {}

func (x *SignUpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUpRequest.ProtoReflect.Descriptor instead.
func (*SignUpRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{0}
}

func (x *SignUpRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SignUpRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SignUpRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SignUpRequest) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *SignUpRequest) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *SignUpRequest) GetProfileInfo() string {
	if x != nil {
		return x.ProfileInfo
	}
	return ""
}

type SignUpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SignUpResponse) Reset() {
	*x = SignUpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignUpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignUpResponse) ProtoMessage() {}

func (x *SignUpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignUpResponse.ProtoReflect.Descriptor instead.
func (*SignUpResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{1}
}

type SignInRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SignInRequest) Reset() {
	*x = SignInRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInRequest) ProtoMessage() {}

func (x *SignInRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInRequest.ProtoReflect.Descriptor instead.
func (*SignInRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{2}
}

func (x *SignInRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SignInRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SignInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username  string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	AvatarUrl string `protobuf:"bytes,2,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	// Types that are assignable to Auth:
	//
	//	*SignInResponse_ApiKey
	//	*SignInResponse_MacFields
	Auth               isSignInResponse_Auth `protobuf_oneof:"auth"`
	RefreshToken       string                `protobuf:"bytes,5,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	TokenExpire        int64                 `protobuf:"varint,6,opt,name=token_expire,json=tokenExpire,proto3" json:"token_expire,omitempty"`
	RefreshTokenExpire int64                 `protobuf:"varint,7,opt,name=refresh_token_expire,json=refreshTokenExpire,proto3" json:"refresh_token_expire,omitempty"`
}

func (x *SignInResponse) Reset() {
	*x = SignInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignInResponse) ProtoMessage() {}

func (x *SignInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignInResponse.ProtoReflect.Descriptor instead.
func (*SignInResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{3}
}

func (x *SignInResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SignInResponse) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (m *SignInResponse) GetAuth() isSignInResponse_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (x *SignInResponse) GetApiKey() string {
	if x, ok := x.GetAuth().(*SignInResponse_ApiKey); ok {
		return x.ApiKey
	}
	return ""
}

func (x *SignInResponse) GetMacFields() *MacFields {
	if x, ok := x.GetAuth().(*SignInResponse_MacFields); ok {
		return x.MacFields
	}
	return nil
}

func (x *SignInResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *SignInResponse) GetTokenExpire() int64 {
	if x != nil {
		return x.TokenExpire
	}
	return 0
}

func (x *SignInResponse) GetRefreshTokenExpire() int64 {
	if x != nil {
		return x.RefreshTokenExpire
	}
	return 0
}

type isSignInResponse_Auth interface {
	isSignInResponse_Auth()
}

type SignInResponse_ApiKey struct {
	ApiKey string `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3,oneof"`
}

type SignInResponse_MacFields struct {
	MacFields *MacFields `protobuf:"bytes,4,opt,name=mac_fields,json=macFields,proto3,oneof"`
}

func (*SignInResponse_ApiKey) isSignInResponse_Auth() {}

func (*SignInResponse_MacFields) isSignInResponse_Auth() {}

type GetCurrentUserInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCurrentUserInfoRequest) Reset() {
	*x = GetCurrentUserInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentUserInfoRequest) ProtoMessage() {}

func (x *GetCurrentUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentUserInfoRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{4}
}

type GetCurrentUserInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Email        string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	AvatarUrl    string `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Introduction string `protobuf:"bytes,4,opt,name=introduction,proto3" json:"introduction,omitempty"`
	ProfileInfo  string `protobuf:"bytes,5,opt,name=profile_info,json=profileInfo,proto3" json:"profile_info,omitempty"`
}

func (x *GetCurrentUserInfoResponse) Reset() {
	*x = GetCurrentUserInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentUserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentUserInfoResponse) ProtoMessage() {}

func (x *GetCurrentUserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentUserInfoResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentUserInfoResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{5}
}

func (x *GetCurrentUserInfoResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *GetCurrentUserInfoResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *GetCurrentUserInfoResponse) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *GetCurrentUserInfoResponse) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *GetCurrentUserInfoResponse) GetProfileInfo() string {
	if x != nil {
		return x.ProfileInfo
	}
	return ""
}

type UpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Email        string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Password     string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	AvatarUrl    string `protobuf:"bytes,4,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Introduction string `protobuf:"bytes,5,opt,name=introduction,proto3" json:"introduction,omitempty"`
	ProfileInfo  string `protobuf:"bytes,6,opt,name=profile_info,json=profileInfo,proto3" json:"profile_info,omitempty"`
}

func (x *UpdateUserRequest) Reset() {
	*x = UpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserRequest) ProtoMessage() {}

func (x *UpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateUserRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UpdateUserRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UpdateUserRequest) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *UpdateUserRequest) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *UpdateUserRequest) GetProfileInfo() string {
	if x != nil {
		return x.ProfileInfo
	}
	return ""
}

type UpdateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateUserResponse) Reset() {
	*x = UpdateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserResponse) ProtoMessage() {}

func (x *UpdateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{7}
}

type SearchUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *SearchUsersRequest) Reset() {
	*x = SearchUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUsersRequest) ProtoMessage() {}

func (x *SearchUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUsersRequest.ProtoReflect.Descriptor instead.
func (*SearchUsersRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{8}
}

func (x *SearchUsersRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SearchUsersRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

type SearchUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*SearchUsersResponse_User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *SearchUsersResponse) Reset() {
	*x = SearchUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUsersResponse) ProtoMessage() {}

func (x *SearchUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUsersResponse.ProtoReflect.Descriptor instead.
func (*SearchUsersResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{9}
}

func (x *SearchUsersResponse) GetUsers() []*SearchUsersResponse_User {
	if x != nil {
		return x.Users
	}
	return nil
}

type RefreshTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshToken string `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
}

func (x *RefreshTokenRequest) Reset() {
	*x = RefreshTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenRequest) ProtoMessage() {}

func (x *RefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{10}
}

func (x *RefreshTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type RefreshTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Auth:
	//
	//	*RefreshTokenResponse_ApiKey
	//	*RefreshTokenResponse_MacFields
	Auth               isRefreshTokenResponse_Auth `protobuf_oneof:"auth"`
	RefreshToken       string                      `protobuf:"bytes,3,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`
	TokenExpire        int64                       `protobuf:"varint,4,opt,name=token_expire,json=tokenExpire,proto3" json:"token_expire,omitempty"`
	RefreshTokenExpire int64                       `protobuf:"varint,5,opt,name=refresh_token_expire,json=refreshTokenExpire,proto3" json:"refresh_token_expire,omitempty"`
}

func (x *RefreshTokenResponse) Reset() {
	*x = RefreshTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenResponse) ProtoMessage() {}

func (x *RefreshTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenResponse.ProtoReflect.Descriptor instead.
func (*RefreshTokenResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{11}
}

func (m *RefreshTokenResponse) GetAuth() isRefreshTokenResponse_Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (x *RefreshTokenResponse) GetApiKey() string {
	if x, ok := x.GetAuth().(*RefreshTokenResponse_ApiKey); ok {
		return x.ApiKey
	}
	return ""
}

func (x *RefreshTokenResponse) GetMacFields() *MacFields {
	if x, ok := x.GetAuth().(*RefreshTokenResponse_MacFields); ok {
		return x.MacFields
	}
	return nil
}

func (x *RefreshTokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *RefreshTokenResponse) GetTokenExpire() int64 {
	if x != nil {
		return x.TokenExpire
	}
	return 0
}

func (x *RefreshTokenResponse) GetRefreshTokenExpire() int64 {
	if x != nil {
		return x.RefreshTokenExpire
	}
	return 0
}

type isRefreshTokenResponse_Auth interface {
	isRefreshTokenResponse_Auth()
}

type RefreshTokenResponse_ApiKey struct {
	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3,oneof"`
}

type RefreshTokenResponse_MacFields struct {
	MacFields *MacFields `protobuf:"bytes,2,opt,name=mac_fields,json=macFields,proto3,oneof"`
}

func (*RefreshTokenResponse_ApiKey) isRefreshTokenResponse_Auth() {}

func (*RefreshTokenResponse_MacFields) isRefreshTokenResponse_Auth() {}

type MacFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacId        string `protobuf:"bytes,1,opt,name=mac_id,json=macId,proto3" json:"mac_id,omitempty"`
	MacKey       string `protobuf:"bytes,2,opt,name=mac_key,json=macKey,proto3" json:"mac_key,omitempty"`
	MacAlgorithm string `protobuf:"bytes,3,opt,name=mac_algorithm,json=macAlgorithm,proto3" json:"mac_algorithm,omitempty"`
}

func (x *MacFields) Reset() {
	*x = MacFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacFields) ProtoMessage() {}

func (x *MacFields) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacFields.ProtoReflect.Descriptor instead.
func (*MacFields) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{12}
}

func (x *MacFields) GetMacId() string {
	if x != nil {
		return x.MacId
	}
	return ""
}

func (x *MacFields) GetMacKey() string {
	if x != nil {
		return x.MacKey
	}
	return ""
}

func (x *MacFields) GetMacAlgorithm() string {
	if x != nil {
		return x.MacAlgorithm
	}
	return ""
}

type PostArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Content string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Tags    []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	Poster  string   `protobuf:"bytes,4,opt,name=poster,proto3" json:"poster,omitempty"`
}

func (x *PostArticleRequest) Reset() {
	*x = PostArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostArticleRequest) ProtoMessage() {}

func (x *PostArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostArticleRequest.ProtoReflect.Descriptor instead.
func (*PostArticleRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{13}
}

func (x *PostArticleRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PostArticleRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *PostArticleRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *PostArticleRequest) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

type PostArticleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId uint64 `protobuf:"varint,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
}

func (x *PostArticleResponse) Reset() {
	*x = PostArticleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostArticleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostArticleResponse) ProtoMessage() {}

func (x *PostArticleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostArticleResponse.ProtoReflect.Descriptor instead.
func (*PostArticleResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{14}
}

func (x *PostArticleResponse) GetArticleId() uint64 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

type DeleteArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Identifier:
	//
	//	*DeleteArticleRequest_Id
	//	*DeleteArticleRequest_Title
	Identifier isDeleteArticleRequest_Identifier `protobuf_oneof:"identifier"`
}

func (x *DeleteArticleRequest) Reset() {
	*x = DeleteArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArticleRequest) ProtoMessage() {}

func (x *DeleteArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArticleRequest.ProtoReflect.Descriptor instead.
func (*DeleteArticleRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{15}
}

func (m *DeleteArticleRequest) GetIdentifier() isDeleteArticleRequest_Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (x *DeleteArticleRequest) GetId() uint64 {
	if x, ok := x.GetIdentifier().(*DeleteArticleRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (x *DeleteArticleRequest) GetTitle() string {
	if x, ok := x.GetIdentifier().(*DeleteArticleRequest_Title); ok {
		return x.Title
	}
	return ""
}

type isDeleteArticleRequest_Identifier interface {
	isDeleteArticleRequest_Identifier()
}

type DeleteArticleRequest_Id struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type DeleteArticleRequest_Title struct {
	Title string `protobuf:"bytes,2,opt,name=title,proto3,oneof"`
}

func (*DeleteArticleRequest_Id) isDeleteArticleRequest_Identifier() {}

func (*DeleteArticleRequest_Title) isDeleteArticleRequest_Identifier() {}

type DeleteArticleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteArticleResponse) Reset() {
	*x = DeleteArticleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteArticleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteArticleResponse) ProtoMessage() {}

func (x *DeleteArticleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteArticleResponse.ProtoReflect.Descriptor instead.
func (*DeleteArticleResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{16}
}

type AddTagsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *AddTagsRequest) Reset() {
	*x = AddTagsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTagsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagsRequest) ProtoMessage() {}

func (x *AddTagsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagsRequest.ProtoReflect.Descriptor instead.
func (*AddTagsRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{17}
}

func (x *AddTagsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AddTagsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTagsResponse) Reset() {
	*x = AddTagsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTagsResponse) ProtoMessage() {}

func (x *AddTagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTagsResponse.ProtoReflect.Descriptor instead.
func (*AddTagsResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{18}
}

type DeleteTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag string `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *DeleteTagRequest) Reset() {
	*x = DeleteTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagRequest) ProtoMessage() {}

func (x *DeleteTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagRequest.ProtoReflect.Descriptor instead.
func (*DeleteTagRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteTagRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

type DeleteTagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTagResponse) Reset() {
	*x = DeleteTagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTagResponse) ProtoMessage() {}

func (x *DeleteTagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTagResponse.ProtoReflect.Descriptor instead.
func (*DeleteTagResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{20}
}

type RefreshAllArticlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshAllArticlesRequest) Reset() {
	*x = RefreshAllArticlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshAllArticlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshAllArticlesRequest) ProtoMessage() {}

func (x *RefreshAllArticlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshAllArticlesRequest.ProtoReflect.Descriptor instead.
func (*RefreshAllArticlesRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{21}
}

type RefreshAllArticlesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshAllArticlesResponse) Reset() {
	*x = RefreshAllArticlesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshAllArticlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshAllArticlesResponse) ProtoMessage() {}

func (x *RefreshAllArticlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshAllArticlesResponse.ProtoReflect.Descriptor instead.
func (*RefreshAllArticlesResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{22}
}

// Comment start
type GetCommentsByArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId uint64 `protobuf:"varint,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
}

func (x *GetCommentsByArticleRequest) Reset() {
	*x = GetCommentsByArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentsByArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentsByArticleRequest) ProtoMessage() {}

func (x *GetCommentsByArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentsByArticleRequest.ProtoReflect.Descriptor instead.
func (*GetCommentsByArticleRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{23}
}

func (x *GetCommentsByArticleRequest) GetArticleId() uint64 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

type GetCommentsByArticleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments []*GetCommentsByArticleResponse_Comment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (x *GetCommentsByArticleResponse) Reset() {
	*x = GetCommentsByArticleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentsByArticleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentsByArticleResponse) ProtoMessage() {}

func (x *GetCommentsByArticleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentsByArticleResponse.ProtoReflect.Descriptor instead.
func (*GetCommentsByArticleResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{24}
}

func (x *GetCommentsByArticleResponse) GetComments() []*GetCommentsByArticleResponse_Comment {
	if x != nil {
		return x.Comments
	}
	return nil
}

type PostCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArticleId uint64 `protobuf:"varint,1,opt,name=article_id,json=articleId,proto3" json:"article_id,omitempty"`
	Content   string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *PostCommentRequest) Reset() {
	*x = PostCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCommentRequest) ProtoMessage() {}

func (x *PostCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCommentRequest.ProtoReflect.Descriptor instead.
func (*PostCommentRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{25}
}

func (x *PostCommentRequest) GetArticleId() uint64 {
	if x != nil {
		return x.ArticleId
	}
	return 0
}

func (x *PostCommentRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type PostCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId uint64 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
}

func (x *PostCommentResponse) Reset() {
	*x = PostCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCommentResponse) ProtoMessage() {}

func (x *PostCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCommentResponse.ProtoReflect.Descriptor instead.
func (*PostCommentResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{26}
}

func (x *PostCommentResponse) GetCommentId() uint64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

type DeleteCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId uint64 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
}

func (x *DeleteCommentRequest) Reset() {
	*x = DeleteCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentRequest) ProtoMessage() {}

func (x *DeleteCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentRequest.ProtoReflect.Descriptor instead.
func (*DeleteCommentRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteCommentRequest) GetCommentId() uint64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

type DeleteCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCommentResponse) Reset() {
	*x = DeleteCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCommentResponse) ProtoMessage() {}

func (x *DeleteCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCommentResponse.ProtoReflect.Descriptor instead.
func (*DeleteCommentResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{28}
}

type EditCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId uint64 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	Content   string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *EditCommentRequest) Reset() {
	*x = EditCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCommentRequest) ProtoMessage() {}

func (x *EditCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCommentRequest.ProtoReflect.Descriptor instead.
func (*EditCommentRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{29}
}

func (x *EditCommentRequest) GetCommentId() uint64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *EditCommentRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type EditCommentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EditCommentResponse) Reset() {
	*x = EditCommentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditCommentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditCommentResponse) ProtoMessage() {}

func (x *EditCommentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditCommentResponse.ProtoReflect.Descriptor instead.
func (*EditCommentResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{30}
}

type UpdateCommentUsefulnessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommentId uint64 `protobuf:"varint,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	IsUseful  bool   `protobuf:"varint,2,opt,name=is_useful,json=isUseful,proto3" json:"is_useful,omitempty"` // true 表示增加 useful 数量，false 表示增加 useless 数量
}

func (x *UpdateCommentUsefulnessRequest) Reset() {
	*x = UpdateCommentUsefulnessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCommentUsefulnessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentUsefulnessRequest) ProtoMessage() {}

func (x *UpdateCommentUsefulnessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentUsefulnessRequest.ProtoReflect.Descriptor instead.
func (*UpdateCommentUsefulnessRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{31}
}

func (x *UpdateCommentUsefulnessRequest) GetCommentId() uint64 {
	if x != nil {
		return x.CommentId
	}
	return 0
}

func (x *UpdateCommentUsefulnessRequest) GetIsUseful() bool {
	if x != nil {
		return x.IsUseful
	}
	return false
}

type UpdateCommentUsefulnessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsefulCount  uint64 `protobuf:"varint,1,opt,name=useful_count,json=usefulCount,proto3" json:"useful_count,omitempty"`
	UselessCount uint64 `protobuf:"varint,2,opt,name=useless_count,json=uselessCount,proto3" json:"useless_count,omitempty"`
}

func (x *UpdateCommentUsefulnessResponse) Reset() {
	*x = UpdateCommentUsefulnessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCommentUsefulnessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommentUsefulnessResponse) ProtoMessage() {}

func (x *UpdateCommentUsefulnessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommentUsefulnessResponse.ProtoReflect.Descriptor instead.
func (*UpdateCommentUsefulnessResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateCommentUsefulnessResponse) GetUsefulCount() uint64 {
	if x != nil {
		return x.UsefulCount
	}
	return 0
}

func (x *UpdateCommentUsefulnessResponse) GetUselessCount() uint64 {
	if x != nil {
		return x.UselessCount
	}
	return 0
}

// S3 start
type GetPresignedURLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectKey   string `protobuf:"bytes,1,opt,name=object_key,json=objectKey,proto3" json:"object_key,omitempty"`
	ContentType string `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Operation   string `protobuf:"bytes,3,opt,name=operation,proto3" json:"operation,omitempty"`
	IsPublic    bool   `protobuf:"varint,4,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
}

func (x *GetPresignedURLRequest) Reset() {
	*x = GetPresignedURLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPresignedURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresignedURLRequest) ProtoMessage() {}

func (x *GetPresignedURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresignedURLRequest.ProtoReflect.Descriptor instead.
func (*GetPresignedURLRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{33}
}

func (x *GetPresignedURLRequest) GetObjectKey() string {
	if x != nil {
		return x.ObjectKey
	}
	return ""
}

func (x *GetPresignedURLRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *GetPresignedURLRequest) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *GetPresignedURLRequest) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

type GetPresignedURLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      string            `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	FormData map[string]string `protobuf:"bytes,2,rep,name=form_data,json=formData,proto3" json:"form_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetPresignedURLResponse) Reset() {
	*x = GetPresignedURLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPresignedURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPresignedURLResponse) ProtoMessage() {}

func (x *GetPresignedURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPresignedURLResponse.ProtoReflect.Descriptor instead.
func (*GetPresignedURLResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{34}
}

func (x *GetPresignedURLResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetPresignedURLResponse) GetFormData() map[string]string {
	if x != nil {
		return x.FormData
	}
	return nil
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{35}
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{36}
}

// API error
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{37}
}

func (x *Error) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SearchUsersResponse_User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username     string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Email        string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	AvatarUrl    string `protobuf:"bytes,3,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	Introduction string `protobuf:"bytes,4,opt,name=introduction,proto3" json:"introduction,omitempty"`
	ProfileInfo  string `protobuf:"bytes,5,opt,name=profile_info,json=profileInfo,proto3" json:"profile_info,omitempty"`
}

func (x *SearchUsersResponse_User) Reset() {
	*x = SearchUsersResponse_User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUsersResponse_User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUsersResponse_User) ProtoMessage() {}

func (x *SearchUsersResponse_User) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUsersResponse_User.ProtoReflect.Descriptor instead.
func (*SearchUsersResponse_User) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{9, 0}
}

func (x *SearchUsersResponse_User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SearchUsersResponse_User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SearchUsersResponse_User) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *SearchUsersResponse_User) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *SearchUsersResponse_User) GetProfileInfo() string {
	if x != nil {
		return x.ProfileInfo
	}
	return ""
}

type GetCommentsByArticleResponse_Comment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content      string `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Commenter    string `protobuf:"bytes,2,opt,name=commenter,proto3" json:"commenter,omitempty"`
	UsefulCount  uint64 `protobuf:"varint,3,opt,name=useful_count,json=usefulCount,proto3" json:"useful_count,omitempty"`
	UselessCount uint64 `protobuf:"varint,4,opt,name=useless_count,json=uselessCount,proto3" json:"useless_count,omitempty"`
	CreatedAt    int64  `protobuf:"varint,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    int64  `protobuf:"varint,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GetCommentsByArticleResponse_Comment) Reset() {
	*x = GetCommentsByArticleResponse_Comment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_brainrot_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCommentsByArticleResponse_Comment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommentsByArticleResponse_Comment) ProtoMessage() {}

func (x *GetCommentsByArticleResponse_Comment) ProtoReflect() protoreflect.Message {
	mi := &file_brainrot_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommentsByArticleResponse_Comment.ProtoReflect.Descriptor instead.
func (*GetCommentsByArticleResponse_Comment) Descriptor() ([]byte, []int) {
	return file_brainrot_proto_rawDescGZIP(), []int{24, 0}
}

func (x *GetCommentsByArticleResponse_Comment) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GetCommentsByArticleResponse_Comment) GetCommenter() string {
	if x != nil {
		return x.Commenter
	}
	return ""
}

func (x *GetCommentsByArticleResponse_Comment) GetUsefulCount() uint64 {
	if x != nil {
		return x.UsefulCount
	}
	return 0
}

func (x *GetCommentsByArticleResponse_Comment) GetUselessCount() uint64 {
	if x != nil {
		return x.UselessCount
	}
	return 0
}

func (x *GetCommentsByArticleResponse_Comment) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GetCommentsByArticleResponse_Comment) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

var File_brainrot_proto protoreflect.FileDescriptor

var file_brainrot_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x02, 0x0a, 0x0d,
	0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x3a, 0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0x32, 0x15, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe8, 0xaf, 0xb7, 0xe6, 0xb1, 0x82, 0xe4, 0xbd, 0x93, 0xd2,
	0x01, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0xd2, 0x01, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x9a, 0x02, 0x01,
	0x06, 0x22, 0x50, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x3a, 0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0x32, 0x15, 0xe7, 0x94, 0xa8, 0xe6,
	0x88, 0xb7, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe4, 0xbd,
	0x93, 0x4a, 0x1c, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x30, 0x2c, 0x20, 0x22,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x6f, 0x6b, 0x22, 0x7d, 0x9a,
	0x02, 0x01, 0x06, 0x22, 0x41, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xa4, 0x04, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x49,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12,
	0x37, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6d,
	0x61, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x3a, 0x80, 0x02, 0x92, 0x41, 0xfc, 0x01, 0x0a, 0xf9, 0x01, 0x32, 0x15, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94,
	0xe4, 0xbd, 0x93, 0x4a, 0xdb, 0x01, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x30,
	0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x6f, 0x6b,
	0x22, 0x2c, 0x20, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x6d, 0x34, 0x6e, 0x35, 0x74, 0x65, 0x72,
	0x22, 0x2c, 0x20, 0x22, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x3a,
	0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x6a, 0x70, 0x67,
	0x22, 0x2c, 0x20, 0x22, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x6d, 0x61,
	0x63, 0x5f, 0x69, 0x64, 0x22, 0x2c, 0x20, 0x22, 0x6d, 0x61, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x22,
	0x3a, 0x20, 0x22, 0x6d, 0x61, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x2c, 0x20, 0x22, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x3a, 0x20, 0x22, 0x6d,
	0x61, 0x63, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x2c, 0x20, 0x22,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3a, 0x20,
	0x22, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7d,
	0x7d, 0x9a, 0x02, 0x01, 0x06, 0x42, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x1b, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9d, 0x03, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e,
	0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x3a, 0xe6, 0x01, 0x92, 0x41, 0xe2, 0x01, 0x0a, 0xdf, 0x01, 0x32, 0x21, 0xe8, 0x8e, 0xb7,
	0xe5, 0x8f, 0x96, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe4, 0xbd, 0x93, 0x4a, 0xb5,
	0x01, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x6f, 0x6b, 0x22, 0x2c, 0x20, 0x22, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x3a, 0x20, 0x22, 0x6d, 0x34, 0x6e, 0x35, 0x74, 0x65, 0x72, 0x22, 0x2c, 0x20, 0x22, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x2c, 0x20,
	0x22, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0x2c, 0x20,
	0x22, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x20,
	0x22, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x20,
	0x22, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x20,
	0x22, 0x7b, 0x7d, 0x22, 0x7d, 0x7d, 0x9a, 0x02, 0x01, 0x06, 0x22, 0xc7, 0x01, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5a, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x3a, 0x44, 0x92, 0x41, 0x41, 0x0a,
	0x3f, 0x32, 0x1b, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4,
	0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe4, 0xbd, 0x93, 0x4a, 0x1c,
	0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x6f, 0x6b, 0x22, 0x7d, 0x9a, 0x02, 0x01, 0x06,
	0x22, 0x46, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xdd, 0x03, 0x0a, 0x13, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x9e, 0x01,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0xe7,
	0x01, 0x92, 0x41, 0xe3, 0x01, 0x0a, 0xe0, 0x01, 0x32, 0x15, 0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2,
	0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe4, 0xbd, 0x93, 0x4a,
	0xc2, 0x01, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x30, 0x2c, 0x20, 0x22, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x6f, 0x6b, 0x22, 0x2c, 0x20, 0x22,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x3a,
	0x20, 0x5b, 0x7b, 0x22, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22,
	0x6d, 0x34, 0x6e, 0x35, 0x74, 0x65, 0x72, 0x22, 0x2c, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x22, 0x3a, 0x20, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x2c, 0x20, 0x22, 0x61, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x2e, 0x6a, 0x70, 0x67, 0x22, 0x2c, 0x20, 0x22, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x20, 0x22, 0x69, 0x6e, 0x74,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x20, 0x22, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x20, 0x22, 0x7b, 0x7d, 0x22,
	0x7d, 0x5d, 0x7d, 0x7d, 0x9a, 0x02, 0x01, 0x06, 0x22, 0x3a, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb1, 0x03, 0x0a, 0x14, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x0a, 0x6d, 0x61, 0x63, 0x5f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x63, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x61, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x3a, 0xc2, 0x01, 0x92, 0x41,
	0xbe, 0x01, 0x0a, 0xbb, 0x01, 0x32, 0x15, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4,
	0xe7, 0x89, 0x8c, 0xe5, 0x93, 0x8d, 0xe5, 0xba, 0x94, 0xe4, 0xbd, 0x93, 0x4a, 0x9d, 0x01, 0x7b,
	0x22, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x3a, 0x20, 0x30, 0x2c, 0x20, 0x22, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x6f, 0x6b, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x3a, 0x20, 0x7b, 0x22, 0x61, 0x75, 0x74, 0x68, 0x22, 0x3a, 0x7b, 0x22, 0x6d, 0x61,
	0x63, 0x5f, 0x69, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x64, 0x22, 0x2c,
	0x20, 0x22, 0x6d, 0x61, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x3a, 0x20, 0x22, 0x6d, 0x61, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x22, 0x2c, 0x20, 0x22, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x3a, 0x20, 0x22, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x7d, 0x2c, 0x20, 0x22, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3a, 0x20, 0x22, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7d, 0x7d, 0x9a, 0x02, 0x01, 0x06,
	0x42, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x60, 0x0a, 0x09, 0x4d, 0x61, 0x63, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x63, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x6d, 0x61, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x61, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x63, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0x70, 0x0a, 0x12, 0x50, 0x6f,
	0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x13,
	0x50, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x49, 0x64, 0x22, 0x4e, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x0a, 0x0e, 0x41,
	0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1b, 0x0a, 0x19, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x1a,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xb7, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x72,
	0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xc7, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x4d, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x34, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x17,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a, 0x12, 0x45, 0x64, 0x69, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x22, 0x69, 0x0a, 0x1f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x66,
	0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x6c, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x6c, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x22, 0xb9,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55,
	0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x4f, 0x0a, 0x09,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a,
	0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x0d, 0x0a, 0x0b, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x5e, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x56, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67,
	0x12, 0x18, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x70, 0x69, 0x6e, 0x67,
	0x32, 0xca, 0x09, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0xc6, 0x01, 0x0a, 0x06, 0x53, 0x69,
	0x67, 0x6e, 0x55, 0x70, 0x12, 0x1a, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01,
	0x92, 0x41, 0x5b, 0x12, 0x21, 0xe5, 0xb0, 0x86, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0xe7, 0x94,
	0xa8, 0xe6, 0x88, 0xb7, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe5, 0x88, 0xb0, 0xe6, 0x95, 0xb0,
	0xe6, 0x8d, 0xae, 0xe5, 0xba, 0x93, 0x4a, 0x36, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x2f, 0x0a,
	0x0c, 0xe6, 0xb3, 0xa8, 0xe5, 0x86, 0x8c, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x12, 0x1f, 0x0a,
	0x1d, 0x1a, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x61,
	0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x2d,
	0x75, 0x70, 0x12, 0xb0, 0x01, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x12, 0x1a, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d, 0x92, 0x41, 0x46, 0x12, 0x0c, 0xe7, 0x94, 0xa8,
	0xe6, 0x88, 0xb7, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0x4a, 0x36, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x2f, 0x0a, 0x0c, 0xe7, 0x99, 0xbb, 0xe5, 0xbd, 0x95, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f,
	0x12, 0x1f, 0x0a, 0x1d, 0x1a, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f,
	0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x73, 0x69,
	0x67, 0x6e, 0x2d, 0x69, 0x6e, 0x12, 0xea, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82, 0x01,
	0x92, 0x41, 0x5e, 0x12, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0xbd, 0x93, 0xe5, 0x89,
	0x8d, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x4a, 0x42, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x3b, 0x0a, 0x0c, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x88,
	0x90, 0xe5, 0x8a, 0x9f, 0x12, 0x2b, 0x0a, 0x29, 0x1a, 0x27, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e,
	0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x61,
	0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0xc1, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76,
	0x92, 0x41, 0x50, 0x12, 0x12, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0x94, 0xa8, 0xe6, 0x88,
	0xb7, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x4a, 0x3a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x33,
	0x0a, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x12, 0x23,
	0x0a, 0x21, 0x1a, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0xbd, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x70, 0x92, 0x41, 0x4a, 0x12, 0x0c, 0xe6, 0x90, 0x9c, 0xe7, 0xb4,
	0xa2, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x4a, 0x3a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x33,
	0x0a, 0x0c, 0xe6, 0x90, 0x9c, 0xe7, 0xb4, 0xa2, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x12, 0x23,
	0x0a, 0x21, 0x1a, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0xd4, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x92, 0x41,
	0x52, 0x12, 0x0c, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0, 0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0x4a,
	0x42, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3b, 0x0a, 0x12, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0,
	0xe4, 0xbb, 0xa4, 0xe7, 0x89, 0x8c, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x12, 0x25, 0x0a, 0x23,
	0x1a, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x9e, 0x08,
	0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x0b, 0x50, 0x6f,
	0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x92, 0x41,
	0x51, 0x12, 0x12, 0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe4, 0xb8, 0x80, 0xe7, 0xaf, 0x87, 0xe6,
	0x96, 0x87, 0xe7, 0xab, 0xa0, 0x4a, 0x3b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x34, 0x0a, 0x0c,
	0xe5, 0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x12, 0x24, 0x0a, 0x22,
	0x1a, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x12, 0xd4, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e,
	0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x72,
	0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x7c, 0x92, 0x41, 0x53, 0x12, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe4, 0xb8, 0x80, 0xe7,
	0xaf, 0x87, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0x4a, 0x3d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x36, 0x0a, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x12,
	0x26, 0x0a, 0x24, 0x1a, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a,
	0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xb8, 0x01,
	0x0a, 0x07, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1b, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x92, 0x41, 0x47, 0x12, 0x0c, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a,
	0xa0, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x4a, 0x37, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x30,
	0x0a, 0x0c, 0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x12, 0x20,
	0x0a, 0x1e, 0x1a, 0x1c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x2f,
	0x61, 0x64, 0x64, 0x2d, 0x74, 0x61, 0x67, 0x73, 0x12, 0xc2, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x1d, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x92, 0x41, 0x49, 0x12, 0x0c, 0xe5, 0x88, 0xa0, 0xe9,
	0x99, 0xa4, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x4a, 0x39, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x32, 0x0a, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x12,
	0x22, 0x0a, 0x20, 0x1a, 0x1e, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2d, 0x74, 0x61, 0x67, 0x12, 0xee, 0x01,
	0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x41, 0x6c, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x92, 0x41, 0x58, 0x12, 0x12, 0xe5, 0x88, 0xb7,
	0xe6, 0x96, 0xb0, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe6, 0x96, 0x87, 0xe7, 0xab, 0xa0, 0x4a,
	0x42, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3b, 0x0a, 0x0c, 0xe5, 0x88, 0xb7, 0xe6, 0x96, 0xb0,
	0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x12, 0x2b, 0x0a, 0x29, 0x1a, 0x27, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x41, 0x6c, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x2f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x2d, 0x61, 0x6c, 0x6c, 0x32, 0x93,
	0x09, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x88, 0x02, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x01, 0x92, 0x41, 0x69, 0x12, 0x21,
	0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0x80, 0xe7, 0xaf, 0x87, 0xe6, 0x96, 0x87, 0xe7,
	0xab, 0xa0, 0xe7, 0x9a, 0x84, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe8, 0xaf, 0x84, 0xe8, 0xae,
	0xba, 0x4a, 0x44, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x3d, 0x0a, 0x0c, 0xe8, 0x8e, 0xb7, 0xe5,
	0x8f, 0x96, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x12, 0x2d, 0x0a, 0x2b, 0x1a, 0x29, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x01, 0x2a,
	0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x62, 0x79, 0x2d, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x92, 0x41, 0x51, 0x12, 0x12, 0xe5,
	0x8f, 0x91, 0xe5, 0xb8, 0x83, 0xe4, 0xb8, 0x80, 0xe6, 0x9d, 0xa1, 0xe8, 0xaf, 0x84, 0xe8, 0xae,
	0xba, 0x4a, 0x3b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x34, 0x0a, 0x0c, 0xe5, 0x8f, 0x91, 0xe5,
	0xb8, 0x83, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x12, 0x24, 0x0a, 0x22, 0x1a, 0x20, 0x2e, 0x62,
	0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x61,
	0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6f,
	0x73, 0x74, 0x12, 0xd4, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72,
	0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c, 0x92, 0x41, 0x53,
	0x12, 0x12, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe4, 0xb8, 0x80, 0xe6, 0x9d, 0xa1, 0xe8, 0xaf,
	0x84, 0xe8, 0xae, 0xba, 0x4a, 0x3d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x36, 0x0a, 0x0c, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x12, 0x26, 0x0a, 0x24, 0x1a,
	0x22, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0xca, 0x01, 0x0a, 0x0b, 0x45, 0x64,
	0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x62, 0x72, 0x61, 0x69,
	0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x62, 0x72, 0x61,
	0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0x92, 0x41,
	0x51, 0x12, 0x12, 0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0xe4, 0xb8, 0x80, 0xe6, 0x9d, 0xa1, 0xe8,
	0xaf, 0x84, 0xe8, 0xae, 0xba, 0x4a, 0x3b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x34, 0x0a, 0x0c,
	0xe7, 0xbc, 0x96, 0xe8, 0xbe, 0x91, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x12, 0x24, 0x0a, 0x22,
	0x1a, 0x20, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x64, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x65, 0x64, 0x69, 0x74, 0x12, 0x8b, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x2b, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x66, 0x75,
	0x6c, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01,
	0x92, 0x41, 0x60, 0x12, 0x15, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0xaf, 0x84, 0xe8, 0xae,
	0xba, 0xe6, 0x9c, 0x89, 0xe7, 0x94, 0xa8, 0xe6, 0x80, 0xa7, 0x4a, 0x47, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x40, 0x0a, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x88, 0x90, 0xe5, 0x8a,
	0x9f, 0x12, 0x30, 0x0a, 0x2e, 0x1a, 0x2c, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x73, 0x65, 0x66, 0x75, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x22, 0x26, 0x2f, 0x76,
	0x31, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x75, 0x73, 0x65, 0x66, 0x75, 0x6c,
	0x6e, 0x65, 0x73, 0x73, 0x32, 0xfe, 0x01, 0x0a, 0x02, 0x53, 0x33, 0x12, 0xf7, 0x01, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x12,
	0x23, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55,
	0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0x92, 0x41, 0x69,
	0x12, 0x26, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0x80, 0xe4, 0xb8, 0xaa, 0x20, 0x53,
	0x33, 0x20, 0xe5, 0xaf, 0xb9, 0xe8, 0xb1, 0xa1, 0xe7, 0x9a, 0x84, 0xe9, 0xa2, 0x84, 0xe7, 0xad,
	0xbe, 0xe5, 0x90, 0x8d, 0x20, 0x55, 0x52, 0x4c, 0x4a, 0x3f, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x38, 0x0a, 0x0c, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0x12,
	0x28, 0x0a, 0x26, 0x1a, 0x24, 0x2e, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x52,
	0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a,
	0x01, 0x2a, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74,
	0x2f, 0x73, 0x33, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x2d, 0x75, 0x72, 0x6c, 0x42, 0x9e, 0x02, 0x92, 0x41, 0x8d, 0x02, 0x12, 0x9b, 0x01, 0x0a,
	0x0c, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x20, 0x41, 0x50, 0x49, 0x12, 0x20, 0x4d,
	0x34, 0x6e, 0x35, 0x74, 0x65, 0x72, 0x27, 0x73, 0x20, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x20, 0x72,
	0x6f, 0x74, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22,
	0x3a, 0x0a, 0x07, 0x4d, 0x34, 0x6e, 0x35, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4d,
	0x34, 0x6e, 0x35, 0x74, 0x65, 0x72, 0x1a, 0x13, 0x6d, 0x34, 0x6e, 0x35, 0x74, 0x65, 0x72, 0x72,
	0x72, 0x40, 0x67, 0x6d, 0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2a, 0x27, 0x0a, 0x0f, 0xe8,
	0x81, 0x94, 0xe7, 0xb3, 0xbb, 0x3a, 0x20, 0x4d, 0x34, 0x6e, 0x35, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x74, 0x2e, 0x6d, 0x65, 0x2f, 0x4d, 0x34, 0x6e,
	0x35, 0x74, 0x65, 0x72, 0x32, 0x04, 0x76, 0x31, 0x2e, 0x30, 0x2a, 0x02, 0x01, 0x02, 0x32, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e,
	0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x5a, 0x45, 0x0a, 0x43, 0x0a, 0x11, 0x62, 0x72, 0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74,
	0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x08, 0x03, 0x28, 0x04, 0x42,
	0x28, 0x0a, 0x0b, 0x0a, 0x01, 0x52, 0x12, 0x06, 0xe5, 0x8f, 0xaa, 0xe8, 0xaf, 0xbb, 0x0a, 0x0c,
	0x0a, 0x02, 0x52, 0x57, 0x12, 0x06, 0xe8, 0xaf, 0xbb, 0xe5, 0x86, 0x99, 0x0a, 0x0b, 0x0a, 0x01,
	0x57, 0x12, 0x06, 0xe5, 0x8f, 0xaa, 0xe5, 0x86, 0x99, 0x5a, 0x0b, 0x70, 0x62, 0x2f, 0x62, 0x72,
	0x61, 0x69, 0x6e, 0x72, 0x6f, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_brainrot_proto_rawDescOnce sync.Once
	file_brainrot_proto_rawDescData = file_brainrot_proto_rawDesc
)

func file_brainrot_proto_rawDescGZIP() []byte {
	file_brainrot_proto_rawDescOnce.Do(func() {
		file_brainrot_proto_rawDescData = protoimpl.X.CompressGZIP(file_brainrot_proto_rawDescData)
	})
	return file_brainrot_proto_rawDescData
}

var file_brainrot_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_brainrot_proto_goTypes = []any{
	(*SignUpRequest)(nil),                        // 0: brainrot.v1.SignUpRequest
	(*SignUpResponse)(nil),                       // 1: brainrot.v1.SignUpResponse
	(*SignInRequest)(nil),                        // 2: brainrot.v1.SignInRequest
	(*SignInResponse)(nil),                       // 3: brainrot.v1.SignInResponse
	(*GetCurrentUserInfoRequest)(nil),            // 4: brainrot.v1.GetCurrentUserInfoRequest
	(*GetCurrentUserInfoResponse)(nil),           // 5: brainrot.v1.GetCurrentUserInfoResponse
	(*UpdateUserRequest)(nil),                    // 6: brainrot.v1.UpdateUserRequest
	(*UpdateUserResponse)(nil),                   // 7: brainrot.v1.UpdateUserResponse
	(*SearchUsersRequest)(nil),                   // 8: brainrot.v1.SearchUsersRequest
	(*SearchUsersResponse)(nil),                  // 9: brainrot.v1.SearchUsersResponse
	(*RefreshTokenRequest)(nil),                  // 10: brainrot.v1.RefreshTokenRequest
	(*RefreshTokenResponse)(nil),                 // 11: brainrot.v1.RefreshTokenResponse
	(*MacFields)(nil),                            // 12: brainrot.v1.MacFields
	(*PostArticleRequest)(nil),                   // 13: brainrot.v1.PostArticleRequest
	(*PostArticleResponse)(nil),                  // 14: brainrot.v1.PostArticleResponse
	(*DeleteArticleRequest)(nil),                 // 15: brainrot.v1.DeleteArticleRequest
	(*DeleteArticleResponse)(nil),                // 16: brainrot.v1.DeleteArticleResponse
	(*AddTagsRequest)(nil),                       // 17: brainrot.v1.AddTagsRequest
	(*AddTagsResponse)(nil),                      // 18: brainrot.v1.AddTagsResponse
	(*DeleteTagRequest)(nil),                     // 19: brainrot.v1.DeleteTagRequest
	(*DeleteTagResponse)(nil),                    // 20: brainrot.v1.DeleteTagResponse
	(*RefreshAllArticlesRequest)(nil),            // 21: brainrot.v1.RefreshAllArticlesRequest
	(*RefreshAllArticlesResponse)(nil),           // 22: brainrot.v1.RefreshAllArticlesResponse
	(*GetCommentsByArticleRequest)(nil),          // 23: brainrot.v1.GetCommentsByArticleRequest
	(*GetCommentsByArticleResponse)(nil),         // 24: brainrot.v1.GetCommentsByArticleResponse
	(*PostCommentRequest)(nil),                   // 25: brainrot.v1.PostCommentRequest
	(*PostCommentResponse)(nil),                  // 26: brainrot.v1.PostCommentResponse
	(*DeleteCommentRequest)(nil),                 // 27: brainrot.v1.DeleteCommentRequest
	(*DeleteCommentResponse)(nil),                // 28: brainrot.v1.DeleteCommentResponse
	(*EditCommentRequest)(nil),                   // 29: brainrot.v1.EditCommentRequest
	(*EditCommentResponse)(nil),                  // 30: brainrot.v1.EditCommentResponse
	(*UpdateCommentUsefulnessRequest)(nil),       // 31: brainrot.v1.UpdateCommentUsefulnessRequest
	(*UpdateCommentUsefulnessResponse)(nil),      // 32: brainrot.v1.UpdateCommentUsefulnessResponse
	(*GetPresignedURLRequest)(nil),               // 33: brainrot.v1.GetPresignedURLRequest
	(*GetPresignedURLResponse)(nil),              // 34: brainrot.v1.GetPresignedURLResponse
	(*PingRequest)(nil),                          // 35: brainrot.v1.PingRequest
	(*PingResponse)(nil),                         // 36: brainrot.v1.PingResponse
	(*Error)(nil),                                // 37: brainrot.v1.Error
	(*SearchUsersResponse_User)(nil),             // 38: brainrot.v1.SearchUsersResponse.User
	(*GetCommentsByArticleResponse_Comment)(nil), // 39: brainrot.v1.GetCommentsByArticleResponse.Comment
	nil, // 40: brainrot.v1.GetPresignedURLResponse.FormDataEntry
}
var file_brainrot_proto_depIdxs = []int32{
	12, // 0: brainrot.v1.SignInResponse.mac_fields:type_name -> brainrot.v1.MacFields
	38, // 1: brainrot.v1.SearchUsersResponse.users:type_name -> brainrot.v1.SearchUsersResponse.User
	12, // 2: brainrot.v1.RefreshTokenResponse.mac_fields:type_name -> brainrot.v1.MacFields
	39, // 3: brainrot.v1.GetCommentsByArticleResponse.comments:type_name -> brainrot.v1.GetCommentsByArticleResponse.Comment
	40, // 4: brainrot.v1.GetPresignedURLResponse.form_data:type_name -> brainrot.v1.GetPresignedURLResponse.FormDataEntry
	35, // 5: brainrot.v1.Ping.Ping:input_type -> brainrot.v1.PingRequest
	0,  // 6: brainrot.v1.User.SignUp:input_type -> brainrot.v1.SignUpRequest
	2,  // 7: brainrot.v1.User.SignIn:input_type -> brainrot.v1.SignInRequest
	4,  // 8: brainrot.v1.User.GetCurrentUserInfo:input_type -> brainrot.v1.GetCurrentUserInfoRequest
	6,  // 9: brainrot.v1.User.Update:input_type -> brainrot.v1.UpdateUserRequest
	8,  // 10: brainrot.v1.User.Search:input_type -> brainrot.v1.SearchUsersRequest
	10, // 11: brainrot.v1.User.RefreshToken:input_type -> brainrot.v1.RefreshTokenRequest
	13, // 12: brainrot.v1.Article.PostArticle:input_type -> brainrot.v1.PostArticleRequest
	15, // 13: brainrot.v1.Article.DeleteArticle:input_type -> brainrot.v1.DeleteArticleRequest
	17, // 14: brainrot.v1.Article.AddTags:input_type -> brainrot.v1.AddTagsRequest
	19, // 15: brainrot.v1.Article.DeleteTag:input_type -> brainrot.v1.DeleteTagRequest
	21, // 16: brainrot.v1.Article.RefreshAllArticles:input_type -> brainrot.v1.RefreshAllArticlesRequest
	23, // 17: brainrot.v1.Comment.GetCommentsByArticle:input_type -> brainrot.v1.GetCommentsByArticleRequest
	25, // 18: brainrot.v1.Comment.PostComment:input_type -> brainrot.v1.PostCommentRequest
	27, // 19: brainrot.v1.Comment.DeleteComment:input_type -> brainrot.v1.DeleteCommentRequest
	29, // 20: brainrot.v1.Comment.EditComment:input_type -> brainrot.v1.EditCommentRequest
	31, // 21: brainrot.v1.Comment.UpdateCommentUsefulness:input_type -> brainrot.v1.UpdateCommentUsefulnessRequest
	33, // 22: brainrot.v1.S3.GetPresignedURL:input_type -> brainrot.v1.GetPresignedURLRequest
	36, // 23: brainrot.v1.Ping.Ping:output_type -> brainrot.v1.PingResponse
	1,  // 24: brainrot.v1.User.SignUp:output_type -> brainrot.v1.SignUpResponse
	3,  // 25: brainrot.v1.User.SignIn:output_type -> brainrot.v1.SignInResponse
	5,  // 26: brainrot.v1.User.GetCurrentUserInfo:output_type -> brainrot.v1.GetCurrentUserInfoResponse
	7,  // 27: brainrot.v1.User.Update:output_type -> brainrot.v1.UpdateUserResponse
	9,  // 28: brainrot.v1.User.Search:output_type -> brainrot.v1.SearchUsersResponse
	11, // 29: brainrot.v1.User.RefreshToken:output_type -> brainrot.v1.RefreshTokenResponse
	14, // 30: brainrot.v1.Article.PostArticle:output_type -> brainrot.v1.PostArticleResponse
	16, // 31: brainrot.v1.Article.DeleteArticle:output_type -> brainrot.v1.DeleteArticleResponse
	18, // 32: brainrot.v1.Article.AddTags:output_type -> brainrot.v1.AddTagsResponse
	20, // 33: brainrot.v1.Article.DeleteTag:output_type -> brainrot.v1.DeleteTagResponse
	22, // 34: brainrot.v1.Article.RefreshAllArticles:output_type -> brainrot.v1.RefreshAllArticlesResponse
	24, // 35: brainrot.v1.Comment.GetCommentsByArticle:output_type -> brainrot.v1.GetCommentsByArticleResponse
	26, // 36: brainrot.v1.Comment.PostComment:output_type -> brainrot.v1.PostCommentResponse
	28, // 37: brainrot.v1.Comment.DeleteComment:output_type -> brainrot.v1.DeleteCommentResponse
	30, // 38: brainrot.v1.Comment.EditComment:output_type -> brainrot.v1.EditCommentResponse
	32, // 39: brainrot.v1.Comment.UpdateCommentUsefulness:output_type -> brainrot.v1.UpdateCommentUsefulnessResponse
	34, // 40: brainrot.v1.S3.GetPresignedURL:output_type -> brainrot.v1.GetPresignedURLResponse
	23, // [23:41] is the sub-list for method output_type
	5,  // [5:23] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_brainrot_proto_init() }
func file_brainrot_proto_init() {
	if File_brainrot_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_brainrot_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SignUpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SignUpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*SignInRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SignInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetCurrentUserInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*GetCurrentUserInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*SearchUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SearchUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MacFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*PostArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*PostArticleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteArticleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*AddTagsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*AddTagsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteTagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshAllArticlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*RefreshAllArticlesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GetCommentsByArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*GetCommentsByArticleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*PostCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*PostCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*EditCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*EditCommentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCommentUsefulnessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateCommentUsefulnessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*GetPresignedURLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*GetPresignedURLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*SearchUsersResponse_User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_brainrot_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*GetCommentsByArticleResponse_Comment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_brainrot_proto_msgTypes[3].OneofWrappers = []any{
		(*SignInResponse_ApiKey)(nil),
		(*SignInResponse_MacFields)(nil),
	}
	file_brainrot_proto_msgTypes[11].OneofWrappers = []any{
		(*RefreshTokenResponse_ApiKey)(nil),
		(*RefreshTokenResponse_MacFields)(nil),
	}
	file_brainrot_proto_msgTypes[15].OneofWrappers = []any{
		(*DeleteArticleRequest_Id)(nil),
		(*DeleteArticleRequest_Title)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_brainrot_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_brainrot_proto_goTypes,
		DependencyIndexes: file_brainrot_proto_depIdxs,
		MessageInfos:      file_brainrot_proto_msgTypes,
	}.Build()
	File_brainrot_proto = out.File
	file_brainrot_proto_rawDesc = nil
	file_brainrot_proto_goTypes = nil
	file_brainrot_proto_depIdxs = nil
}
