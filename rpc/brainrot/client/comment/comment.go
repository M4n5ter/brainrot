// Code generated by goctl. DO NOT EDIT.
// Source: brainrot.proto

package comment

import (
	"context"

	"brainrot/gen/pb/brainrot"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddTagsRequest                       = brainrot.AddTagsRequest
	AddTagsResponse                      = brainrot.AddTagsResponse
	DeleteArticleRequest                 = brainrot.DeleteArticleRequest
	DeleteArticleResponse                = brainrot.DeleteArticleResponse
	DeleteCommentRequest                 = brainrot.DeleteCommentRequest
	DeleteCommentResponse                = brainrot.DeleteCommentResponse
	DeleteTagRequest                     = brainrot.DeleteTagRequest
	DeleteTagResponse                    = brainrot.DeleteTagResponse
	EditCommentRequest                   = brainrot.EditCommentRequest
	EditCommentResponse                  = brainrot.EditCommentResponse
	Error                                = brainrot.Error
	GetCommentsByArticleRequest          = brainrot.GetCommentsByArticleRequest
	GetCommentsByArticleResponse         = brainrot.GetCommentsByArticleResponse
	GetCommentsByArticleResponse_Comment = brainrot.GetCommentsByArticleResponse_Comment
	GetCurrentUserInfoRequest            = brainrot.GetCurrentUserInfoRequest
	GetCurrentUserInfoResponse           = brainrot.GetCurrentUserInfoResponse
	GetPresignedURLRequest               = brainrot.GetPresignedURLRequest
	GetPresignedURLResponse              = brainrot.GetPresignedURLResponse
	MacFields                            = brainrot.MacFields
	PingRequest                          = brainrot.PingRequest
	PingResponse                         = brainrot.PingResponse
	PostArticleRequest                   = brainrot.PostArticleRequest
	PostArticleResponse                  = brainrot.PostArticleResponse
	PostCommentRequest                   = brainrot.PostCommentRequest
	PostCommentResponse                  = brainrot.PostCommentResponse
	RefreshAllArticlesRequest            = brainrot.RefreshAllArticlesRequest
	RefreshAllArticlesResponse           = brainrot.RefreshAllArticlesResponse
	RefreshTokenRequest                  = brainrot.RefreshTokenRequest
	RefreshTokenResponse                 = brainrot.RefreshTokenResponse
	SearchUsersRequest                   = brainrot.SearchUsersRequest
	SearchUsersResponse                  = brainrot.SearchUsersResponse
	SearchUsersResponse_User             = brainrot.SearchUsersResponse_User
	SignInRequest                        = brainrot.SignInRequest
	SignInResponse                       = brainrot.SignInResponse
	SignUpRequest                        = brainrot.SignUpRequest
	SignUpResponse                       = brainrot.SignUpResponse
	UpdateCommentUsefulnessRequest       = brainrot.UpdateCommentUsefulnessRequest
	UpdateCommentUsefulnessResponse      = brainrot.UpdateCommentUsefulnessResponse
	UpdateUserRequest                    = brainrot.UpdateUserRequest
	UpdateUserResponse                   = brainrot.UpdateUserResponse

	Comment interface {
		// Get comments by article
		GetCommentsByArticle(ctx context.Context, in *GetCommentsByArticleRequest, opts ...grpc.CallOption) (*GetCommentsByArticleResponse, error)
		// Post comment
		PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*PostCommentResponse, error)
		// Delete comment
		DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
		// Edit comment
		EditComment(ctx context.Context, in *EditCommentRequest, opts ...grpc.CallOption) (*EditCommentResponse, error)
		// Update comment usefulness
		UpdateCommentUsefulness(ctx context.Context, in *UpdateCommentUsefulnessRequest, opts ...grpc.CallOption) (*UpdateCommentUsefulnessResponse, error)
	}

	defaultComment struct {
		cli zrpc.Client
	}
)

func NewComment(cli zrpc.Client) Comment {
	return &defaultComment{
		cli: cli,
	}
}

// Get comments by article
func (m *defaultComment) GetCommentsByArticle(ctx context.Context, in *GetCommentsByArticleRequest, opts ...grpc.CallOption) (*GetCommentsByArticleResponse, error) {
	client := brainrot.NewCommentClient(m.cli.Conn())
	return client.GetCommentsByArticle(ctx, in, opts...)
}

// Post comment
func (m *defaultComment) PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*PostCommentResponse, error) {
	client := brainrot.NewCommentClient(m.cli.Conn())
	return client.PostComment(ctx, in, opts...)
}

// Delete comment
func (m *defaultComment) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	client := brainrot.NewCommentClient(m.cli.Conn())
	return client.DeleteComment(ctx, in, opts...)
}

// Edit comment
func (m *defaultComment) EditComment(ctx context.Context, in *EditCommentRequest, opts ...grpc.CallOption) (*EditCommentResponse, error) {
	client := brainrot.NewCommentClient(m.cli.Conn())
	return client.EditComment(ctx, in, opts...)
}

// Update comment usefulness
func (m *defaultComment) UpdateCommentUsefulness(ctx context.Context, in *UpdateCommentUsefulnessRequest, opts ...grpc.CallOption) (*UpdateCommentUsefulnessResponse, error) {
	client := brainrot.NewCommentClient(m.cli.Conn())
	return client.UpdateCommentUsefulness(ctx, in, opts...)
}
