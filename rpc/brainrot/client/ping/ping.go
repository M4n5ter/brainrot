// Code generated by goctl. DO NOT EDIT.
// Source: brainrot.proto

package ping

import (
	"context"

	"github.com/m4n5ter/brainrot/pb/brainrot"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteArticleRequest  = brainrot.DeleteArticleRequest
	DeleteArticleResponse = brainrot.DeleteArticleResponse
	Error                 = brainrot.Error
	PingRequest           = brainrot.PingRequest
	PingResponse          = brainrot.PingResponse
	PostArticleRequest    = brainrot.PostArticleRequest
	PostArticleResponse   = brainrot.PostArticleResponse
	RefreshTokenRequest   = brainrot.RefreshTokenRequest
	RefreshTokenResponse  = brainrot.RefreshTokenResponse
	SighInRequest         = brainrot.SighInRequest
	SighInResponse        = brainrot.SighInResponse
	SighUpRequest         = brainrot.SighUpRequest
	SighUpResponse        = brainrot.SighUpResponse

	Ping interface {
		// Ping is a simple health check
		Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	}

	defaultPing struct {
		cli zrpc.Client
	}
)

func NewPing(cli zrpc.Client) Ping {
	return &defaultPing{
		cli: cli,
	}
}

// Ping is a simple health check
func (m *defaultPing) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	client := brainrot.NewPingClient(m.cli.Conn())
	return client.Ping(ctx, in, opts...)
}
