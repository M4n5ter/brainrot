// Code generated by goctl. DO NOT EDIT.
// Source: brainrot.proto

package user

import (
	"context"

	"brainrot/gen/pb/brainrot"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteArticleRequest     = brainrot.DeleteArticleRequest
	DeleteArticleResponse    = brainrot.DeleteArticleResponse
	Error                    = brainrot.Error
	MacFields                = brainrot.MacFields
	PingRequest              = brainrot.PingRequest
	PingResponse             = brainrot.PingResponse
	PostArticleRequest       = brainrot.PostArticleRequest
	PostArticleResponse      = brainrot.PostArticleResponse
	RefreshTokenRequest      = brainrot.RefreshTokenRequest
	RefreshTokenResponse     = brainrot.RefreshTokenResponse
	SearchUsersRequest       = brainrot.SearchUsersRequest
	SearchUsersResponse      = brainrot.SearchUsersResponse
	SearchUsersResponse_User = brainrot.SearchUsersResponse_User
	SignInRequest            = brainrot.SignInRequest
	SignInResponse           = brainrot.SignInResponse
	SignUpRequest            = brainrot.SignUpRequest
	SignUpResponse           = brainrot.SignUpResponse
	UpdateUserRequest        = brainrot.UpdateUserRequest
	UpdateUserResponse       = brainrot.UpdateUserResponse

	User interface {
		// Sign up
		SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error)
		// Sign in
		SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
		// Update user
		Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
		// Search users
		Search(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error)
		// Refresh token
		RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// Sign up
func (m *defaultUser) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*SignUpResponse, error) {
	client := brainrot.NewUserClient(m.cli.Conn())
	return client.SignUp(ctx, in, opts...)
}

// Sign in
func (m *defaultUser) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	client := brainrot.NewUserClient(m.cli.Conn())
	return client.SignIn(ctx, in, opts...)
}

// Update user
func (m *defaultUser) Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	client := brainrot.NewUserClient(m.cli.Conn())
	return client.Update(ctx, in, opts...)
}

// Search users
func (m *defaultUser) Search(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error) {
	client := brainrot.NewUserClient(m.cli.Conn())
	return client.Search(ctx, in, opts...)
}

// Refresh token
func (m *defaultUser) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	client := brainrot.NewUserClient(m.cli.Conn())
	return client.RefreshToken(ctx, in, opts...)
}
