// Code generated by goctl. DO NOT EDIT.
// Source: brainrot.proto

package user

import (
	"context"

	"github.com/m4n5ter/brainrot/pb/brainrot"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteArticleRequest  = brainrot.DeleteArticleRequest
	DeleteArticleResponse = brainrot.DeleteArticleResponse
	Error                 = brainrot.Error
	PingRequest           = brainrot.PingRequest
	PingResponse          = brainrot.PingResponse
	PostArticleRequest    = brainrot.PostArticleRequest
	PostArticleResponse   = brainrot.PostArticleResponse
	RefreshTokenRequest   = brainrot.RefreshTokenRequest
	RefreshTokenResponse  = brainrot.RefreshTokenResponse
	SighInRequest         = brainrot.SighInRequest
	SighInResponse        = brainrot.SighInResponse
	SighUpRequest         = brainrot.SighUpRequest
	SighUpResponse        = brainrot.SighUpResponse

	User interface {
		// Sigh up
		SighUp(ctx context.Context, in *SighUpRequest, opts ...grpc.CallOption) (*SighUpResponse, error)
		// Sigh in
		SighIn(ctx context.Context, in *SighInRequest, opts ...grpc.CallOption) (*SighInResponse, error)
		// Refresh token
		RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

// Sigh up
func (m *defaultUser) SighUp(ctx context.Context, in *SighUpRequest, opts ...grpc.CallOption) (*SighUpResponse, error) {
	client := brainrot.NewUserClient(m.cli.Conn())
	return client.SighUp(ctx, in, opts...)
}

// Sigh in
func (m *defaultUser) SighIn(ctx context.Context, in *SighInRequest, opts ...grpc.CallOption) (*SighInResponse, error) {
	client := brainrot.NewUserClient(m.cli.Conn())
	return client.SighIn(ctx, in, opts...)
}

// Refresh token
func (m *defaultUser) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...grpc.CallOption) (*RefreshTokenResponse, error) {
	client := brainrot.NewUserClient(m.cli.Conn())
	return client.RefreshToken(ctx, in, opts...)
}
