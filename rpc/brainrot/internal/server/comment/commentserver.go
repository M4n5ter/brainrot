// Code generated by goctl. DO NOT EDIT.
// Source: brainrot.proto

package server

import (
	"context"

	"brainrot/gen/pb/brainrot"
	"brainrot/rpc/brainrot/internal/logic/comment"
	"brainrot/rpc/brainrot/internal/svc"
)

type CommentServer struct {
	svcCtx *svc.ServiceContext
	brainrot.UnimplementedCommentServer
}

func NewCommentServer(svcCtx *svc.ServiceContext) *CommentServer {
	return &CommentServer{
		svcCtx: svcCtx,
	}
}

// Get comments by article
func (s *CommentServer) GetCommentsByArticle(ctx context.Context, in *brainrot.GetCommentsByArticleRequest) (*brainrot.GetCommentsByArticleResponse, error) {
	l := commentlogic.NewGetCommentsByArticleLogic(ctx, s.svcCtx)
	return l.GetCommentsByArticle(in)
}

// Post comment
func (s *CommentServer) PostComment(ctx context.Context, in *brainrot.PostCommentRequest) (*brainrot.PostCommentResponse, error) {
	l := commentlogic.NewPostCommentLogic(ctx, s.svcCtx)
	return l.PostComment(in)
}

// Delete comment
func (s *CommentServer) DeleteComment(ctx context.Context, in *brainrot.DeleteCommentRequest) (*brainrot.DeleteCommentResponse, error) {
	l := commentlogic.NewDeleteCommentLogic(ctx, s.svcCtx)
	return l.DeleteComment(in)
}

// Edit comment
func (s *CommentServer) EditComment(ctx context.Context, in *brainrot.EditCommentRequest) (*brainrot.EditCommentResponse, error) {
	l := commentlogic.NewEditCommentLogic(ctx, s.svcCtx)
	return l.EditComment(in)
}

// Update comment usefulness
func (s *CommentServer) UpdateCommentUsefulness(ctx context.Context, in *brainrot.UpdateCommentUsefulnessRequest) (*brainrot.UpdateCommentUsefulnessResponse, error) {
	l := commentlogic.NewUpdateCommentUsefulnessLogic(ctx, s.svcCtx)
	return l.UpdateCommentUsefulness(in)
}
