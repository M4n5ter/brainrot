// Code generated by goctl. DO NOT EDIT.
// Source: brainrot.proto

package server

import (
	"context"

	"brainrot/gen/pb/brainrot"
	"brainrot/rpc/brainrot/internal/logic/user"
	"brainrot/rpc/brainrot/internal/svc"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	brainrot.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

// Sigh up
func (s *UserServer) SighUp(ctx context.Context, in *brainrot.SighUpRequest) (*brainrot.SighUpResponse, error) {
	l := userlogic.NewSighUpLogic(ctx, s.svcCtx)
	return l.SighUp(in)
}

// Sigh in
func (s *UserServer) SighIn(ctx context.Context, in *brainrot.SighInRequest) (*brainrot.SighInResponse, error) {
	l := userlogic.NewSighInLogic(ctx, s.svcCtx)
	return l.SighIn(in)
}

// Update user
func (s *UserServer) Update(ctx context.Context, in *brainrot.UpdateUserRequest) (*brainrot.UpdateUserResponse, error) {
	l := userlogic.NewUpdateLogic(ctx, s.svcCtx)
	return l.Update(in)
}

// Search users
func (s *UserServer) Search(ctx context.Context, in *brainrot.SearchUsersRequest) (*brainrot.SearchUsersResponse, error) {
	l := userlogic.NewSearchLogic(ctx, s.svcCtx)
	return l.Search(in)
}

// Refresh token
func (s *UserServer) RefreshToken(ctx context.Context, in *brainrot.RefreshTokenRequest) (*brainrot.RefreshTokenResponse, error) {
	l := userlogic.NewRefreshTokenLogic(ctx, s.svcCtx)
	return l.RefreshToken(in)
}
