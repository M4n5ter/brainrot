// Code generated by goctl. DO NOT EDIT.
// Source: makabaka.proto

package article

import (
	"context"

	"github.com/m4n5ter/makabaka/pb/makabaka"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteArticleRequest  = makabaka.DeleteArticleRequest
	DeleteArticleResponse = makabaka.DeleteArticleResponse
	Error                 = makabaka.Error
	PingRequest           = makabaka.PingRequest
	PingResponse          = makabaka.PingResponse
	PostArticleRequest    = makabaka.PostArticleRequest
	PostArticleResponse   = makabaka.PostArticleResponse
	RefreshTokenRequest   = makabaka.RefreshTokenRequest
	RefreshTokenResponse  = makabaka.RefreshTokenResponse
	SighInRequest         = makabaka.SighInRequest
	SighInResponse        = makabaka.SighInResponse
	SighUpRequest         = makabaka.SighUpRequest
	SighUpResponse        = makabaka.SighUpResponse

	Article interface {
		// Post article
		PostArticle(ctx context.Context, in *PostArticleRequest, opts ...grpc.CallOption) (*PostArticleResponse, error)
		// Delete article
		DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleResponse, error)
	}

	defaultArticle struct {
		cli zrpc.Client
	}
)

func NewArticle(cli zrpc.Client) Article {
	return &defaultArticle{
		cli: cli,
	}
}

// Post article
func (m *defaultArticle) PostArticle(ctx context.Context, in *PostArticleRequest, opts ...grpc.CallOption) (*PostArticleResponse, error) {
	client := makabaka.NewArticleClient(m.cli.Conn())
	return client.PostArticle(ctx, in, opts...)
}

// Delete article
func (m *defaultArticle) DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleResponse, error) {
	client := makabaka.NewArticleClient(m.cli.Conn())
	return client.DeleteArticle(ctx, in, opts...)
}
