syntax = "proto3";

package brainrot.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "pb/brainrot";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "brainrot API"
    version: "v1.0"
    description: "M4n5ter's brain rot time project"
    contact: {
      name: "M4n5ter"
      url: "https://github.com/M4n5ter"
      email: "m4n5terrr@gmail.com"
    }
    license: {
      name: "联系: M4n5ter"
      url: "https://t.me/M4n5ter"
    }
  }
  schemes: [
    HTTP,
    HTTPS
  ]
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "brainrot security"
      value: {
        type: TYPE_OAUTH2
        flow: FLOW_ACCESS_CODE
        scopes: {
          scope: [
            {
              key: "RW"
              value: "读写"
            },
            {
              key: "R"
              value: "只读"
            },
            {
              key: "W"
              value: "只写"
            }
          ]
        }
      }
    }
  }
};

// User start

message SignUpRequest {
  string username = 1;
  string email = 2;
  string password = 3;
  string avatar_url = 4;
  string introduction = 5;
  string profile_info = 6; // Should be a valid JSON string
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      type: OBJECT
      description: "用户注册请求体"
      required: [
        "username",
        "email",
        "password"
      ]
    }
  };
}
message SignUpResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      type: OBJECT
      description: "用户注册响应体"
      example: '{"code": 0, "message": "ok"}'
    }
  };
}
message SignInRequest {
  string email = 1;
  string password = 2;
}
message SignInResponse {
  string username = 1;
  string avatar_url = 2;
  oneof auth {
    string api_key = 3;
    MacFields mac_fields = 4;
  }
  string refresh_token = 5;
  int64 token_expire = 6;
  int64 refresh_token_expire = 7;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      type: OBJECT
      description: "用户登录响应体"
      example: '{"code": 0, "message": "ok", "data": {"username": "m4n5ter", "avatar_url": "https://example.com/avatar.jpg", "mac_id": "mac_id", "mac_key": "mac_key", "mac_algorithm": "mac_algorithm", "refresh_token": "refresh_token"}}'
    }
  };
}
message GetCurrentUserInfoRequest {}
message GetCurrentUserInfoResponse {
  string username = 1;
  string email = 2;
  string avatar_url = 3;
  string introduction = 4;
  string profile_info = 5;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      type: OBJECT
      description: "获取当前用户信息响应体"
      example: '{"code": 0, "message": "ok", "data": {"username": "m4n5ter", "email": "email", "avatar_url": "https://example.com/avatar.jpg", "introduction": "introduction", "profile_info": "{}"}}'
    }
  };
}
message UpdateUserRequest {
  string username = 1;
  string email = 2;
  string password = 3;
  string avatar_url = 4;
  string introduction = 5;
  string profile_info = 6;
}
message UpdateUserResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      type: OBJECT
      description: "更新用户信息响应体"
      example: '{"code": 0, "message": "ok"}'
    }
  };
}
message SearchUsersRequest {
  string email = 1;
  string username = 2;
}
message SearchUsersResponse {
  message User {
    string username = 1;
    string email = 2;
    string avatar_url = 3;
    string introduction = 4;
    string profile_info = 5;
  }
  repeated User users = 1;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      type: OBJECT
      description: "搜索用户响应体"
      example: '{"code": 0, "message": "ok", "data": {"users": [{"username": "m4n5ter", "email": "email", "avatar_url": "https://example.com/avatar.jpg", "introduction": "introduction", "profile_info": "{}"}]}}'
    }
  };
}
message RefreshTokenRequest {
  string refresh_token = 1;
}
message RefreshTokenResponse {
  oneof auth {
    string api_key = 1;
    MacFields mac_fields = 2;
  }
  string refresh_token = 3;
  int64 token_expire = 4;
  int64 refresh_token_expire = 5;
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      type: OBJECT
      description: "刷新令牌响应体"
      example: '{"code": 0, "message": "ok", "data": {"auth":{"mac_id": "mac_id", "mac_key": "mac_key", "mac_algorithm": "mac_algorithm"}, "refresh_token": "refresh_token"}}'
    }
  };
}
message MacFields {
  string mac_id = 1;
  string mac_key = 2;
  string mac_algorithm = 3;
}
// User end

// Article start

message PostArticleRequest {
  string title = 1;
  string content = 2;
  repeated string tags = 3;
  string poster = 4;
}
message PostArticleResponse {
  uint64 article_id = 1;
}
message DeleteArticleRequest {
  oneof identifier {
    uint64 id = 1;
    string title = 2;
  }
}
message DeleteArticleResponse {}
message AddTagsRequest {
  // TODO: This operation should be protected by a security mechanism. e.g, only privilege user can do this.

  repeated string tags = 1;
}
message AddTagsResponse {}
message DeleteTagRequest {
  // TODO: This operation should be protected by a security mechanism. e.g, only privilege user can do this.

  string tag = 1;
}
message DeleteTagResponse {}
message RefreshAllArticlesRequest {
  // TODO: This operation should be protected by a security mechanism. e.g, only privilege user can do this.
}
message RefreshAllArticlesResponse {}
// Article end

// Comment start
message GetCommentsByArticleRequest {
  uint64 article_id = 1;
}
message GetCommentsByArticleResponse {
  message Comment {
    string content = 1;
    string commenter = 2;
    uint64 useful_count = 3;
    uint64 useless_count = 4;
    int64 created_at = 5;
    int64 updated_at = 6;
  }
  repeated Comment comments = 1;
}
message PostCommentRequest {
  uint64 article_id = 1;
  string content = 2;
}
message PostCommentResponse {
  uint64 comment_id = 1;
}
message DeleteCommentRequest {
  uint64 comment_id = 1;
}
message DeleteCommentResponse {}
message EditCommentRequest {
  uint64 comment_id = 1;
  string content = 2;
}
message EditCommentResponse {}
message UpdateCommentUsefulnessRequest {
  uint64 comment_id = 1;
  bool is_useful = 2; // true 表示增加 useful 数量，false 表示增加 useless 数量
}
message UpdateCommentUsefulnessResponse {
  uint64 useful_count = 1;
  uint64 useless_count = 2;
}
// Comment end

// S3 start
message GetPresignedURLRequest {
  string object_key = 1;
  string content_type = 2;
  string operation = 3;
  bool is_public = 4;
}
message GetPresignedURLResponse {
  string url = 1;
  map<string, string> form_data = 2;
}
// S3 end

// Ping start

message PingRequest {}
message PingResponse {}
// Ping end

// API error
message Error {
  uint32 code = 1;
  string message = 2;
}

service Ping {
  // Ping is a simple health check
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {get: "/v1/brainrot/ping"};
  }
}

service User {
  // Sign up
  rpc SignUp(SignUpRequest) returns (SignUpResponse) {
    option (google.api.http) = {
      post: "/v1/brainrot/user/sign-up"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "将一个用户注册到数据库"
      responses: [
        {
          key: "200"
          value: {
            description: "注册成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.SignUpResponse"}
            }
          }
        }
      ]
    };
  }

  // Sign in
  rpc SignIn(SignInRequest) returns (SignInResponse) {
    option (google.api.http) = {
      post: "/v1/brainrot/user/sign-in"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "用户登录"
      responses: [
        {
          key: "200"
          value: {
            description: "登录成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.SignInResponse"}
            }
          }
        }
      ]
    };
  }

  // Get current user info
  rpc GetCurrentUserInfo(GetCurrentUserInfoRequest) returns (GetCurrentUserInfoResponse) {
    option (google.api.http) = {get: "/v1/brainrot/user/current"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取当前用户信息"
      responses: [
        {
          key: "200"
          value: {
            description: "获取成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.GetCurrentUserInfoResponse"}
            }
          }
        }
      ]
    };
  }

  // Update user
  rpc Update(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      post: "/v1/brainrot/user/update"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "更新用户信息"
      responses: [
        {
          key: "200"
          value: {
            description: "更新成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.UpdateUserResponse"}
            }
          }
        }
      ]
    };
  }

  // Search users
  rpc Search(SearchUsersRequest) returns (SearchUsersResponse) {
    option (google.api.http) = {
      post: "/v1/brainrot/user/search"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "搜索用户"
      responses: [
        {
          key: "200"
          value: {
            description: "搜索成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.SearchUserResponse"}
            }
          }
        }
      ]
    };
  }

  // Refresh token
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/v1/brainrot/user/refresh-token"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "刷新令牌"
      responses: [
        {
          key: "200"
          value: {
            description: "刷新令牌成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.RefreshTokenResponse"}
            }
          }
        }
      ]
    };
  }
}

service Article {
  // Post article
  rpc PostArticle(PostArticleRequest) returns (PostArticleResponse) {
    option (google.api.http) = {
      post: "/v1/brainrot/article/post"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "发布一篇文章"
      responses: [
        {
          key: "200"
          value: {
            description: "发布成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.PostArticleResponse"}
            }
          }
        }
      ]
    };
  }

  // Delete article
  rpc DeleteArticle(DeleteArticleRequest) returns (DeleteArticleResponse) {
    option (google.api.http) = {
      post: "/v1/brainrot/article/delete"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "删除一篇文章"
      responses: [
        {
          key: "200"
          value: {
            description: "删除成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.DeleteArticleResponse"}
            }
          }
        }
      ]
    };
  }

  // Add tags
  rpc AddTags(AddTagsRequest) returns (AddTagsResponse) {
    option (google.api.http) = {
      post: "/v1/brainrot/article/add-tags"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "添加标签"
      responses: [
        {
          key: "200"
          value: {
            description: "添加成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.AddTagsResponse"}
            }
          }
        }
      ]
    };
  }

  // Delete tags
  rpc DeleteTag(DeleteTagRequest) returns (DeleteTagResponse) {
    option (google.api.http) = {
      post: "/v1/brainrot/article/delete-tag"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "删除标签"
      responses: [
        {
          key: "200"
          value: {
            description: "删除成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.DeleteTagResponse"}
            }
          }
        }
      ]
    };
  }

  // Refresh all articles
  rpc RefreshAllArticles(RefreshAllArticlesRequest) returns (RefreshAllArticlesResponse) {
    option (google.api.http) = {
      post: "/v1/brainrot/article/refresh-all"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "刷新所有文章"
      responses: [
        {
          key: "200"
          value: {
            description: "刷新成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.RefreshAllArticlesResponse"}
            }
          }
        }
      ]
    };
  }
}

service Comment {
  // Get comments by article
  rpc GetCommentsByArticle(GetCommentsByArticleRequest) returns (GetCommentsByArticleResponse) {
    option (google.api.http) = {
      post: "/v1/brainrot/comment/get-by-article"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取一篇文章的所有评论"
      responses: [
        {
          key: "200"
          value: {
            description: "获取成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.GetCommentsByArticleResponse"}
            }
          }
        }
      ]
    };
  }

  // Post comment
  rpc PostComment(PostCommentRequest) returns (PostCommentResponse) {
    option (google.api.http) = {
      post: "/v1/brainrot/comment/post"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "发布一条评论"
      responses: [
        {
          key: "200"
          value: {
            description: "发布成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.PostCommentResponse"}
            }
          }
        }
      ]
    };
  }

  // Delete comment
  rpc DeleteComment(DeleteCommentRequest) returns (DeleteCommentResponse) {
    option (google.api.http) = {
      post: "/v1/brainrot/comment/delete"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "删除一条评论"
      responses: [
        {
          key: "200"
          value: {
            description: "删除成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.DeleteCommentResponse"}
            }
          }
        }
      ]
    };
  }

  // Edit comment
  rpc EditComment(EditCommentRequest) returns (EditCommentResponse) {
    option (google.api.http) = {
      post: "/v1/brainrot/comment/edit"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "编辑一条评论"
      responses: [
        {
          key: "200"
          value: {
            description: "编辑成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.EditCommentResponse"}
            }
          }
        }
      ]
    };
  }

  // Update comment usefulness
  rpc UpdateCommentUsefulness(UpdateCommentUsefulnessRequest) returns (UpdateCommentUsefulnessResponse) {
    option (google.api.http) = {
      post: "/v1/brainrot/comment/update-usefulness"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "更新评论有用性"
      responses: [
        {
          key: "200"
          value: {
            description: "更新成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.UpdateCommentUsefulnessResponse"}
            }
          }
        }
      ]
    };
  }
}

service S3 {
  // Get presigned url
  rpc GetPresignedURL(GetPresignedURLRequest) returns (GetPresignedURLResponse) {
    option (google.api.http) = {
      post: "/v1/brainrot/s3/get-presigned-url"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取一个 S3 对象的预签名 URL"
      responses: [
        {
          key: "200"
          value: {
            description: "获取成功"
            schema: {
              json_schema: {ref: ".brainrot.v1.GetPresignedURLResponse"}
            }
          }
        }
      ]
    };
  }
}
