// Generated by modified customized.tpl

type extended{{.upperStartCamelObject}}Model interface {
    Trans(ctx context.Context,fn func(context context.Context,session sqlx.Session) error) error
    FindPageListByIdDESC(ctx context.Context, preMinID, pageSize {{.primaryKeyDataType}}) ([]*{{.upperStartCamelObject}}, error)
    FindPageListByIdASC(ctx context.Context, preMaxID, pageSize {{.primaryKeyDataType}}) ([]*{{.upperStartCamelObject}}, error)
}

func (m *default{{.upperStartCamelObject}}Model) FindPageListByIdDESC(ctx context.Context, preMinID, pageSize {{.primaryKeyDataType}}) ([]*{{.upperStartCamelObject}}, error) {
	args := []any{}
	where := " "
	
	if preMinID > 0 {
		where = " where {{.lowerStartCamelPrimaryKey}} < ? "
		args = append(args, preMinID)
	}

	query := fmt.Sprintf("SELECT %s FROM %s%sORDER BY {{.lowerStartCamelPrimaryKey}} DESC LIMIT ?", {{.lowerStartCamelObject}}Rows, m.table, where)
	args = append(args, pageSize)

	var resp []*{{.upperStartCamelObject}}
	{{if .withCache}}err := m.QueryRowsNoCacheCtx(ctx, &resp, query, args...){{else}}
	err := m.conn.QueryRowsCtx(ctx, &resp, query, args...)
	{{end}}
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *default{{.upperStartCamelObject}}Model) FindPageListByIdASC(ctx context.Context, preMaxID, pageSize {{.primaryKeyDataType}}) ([]*{{.upperStartCamelObject}}, error) {
	args := []any{}
	where := " "
	
	if preMaxID > 0 {
		where = " where {{.lowerStartCamelPrimaryKey}} > ? "
		args = append(args, preMaxID)
	}

	query := fmt.Sprintf("SELECT %s FROM %s%sORDER BY {{.lowerStartCamelPrimaryKey}} ASC LIMIT ?", {{.lowerStartCamelObject}}Rows, m.table, where)
	args = append(args, pageSize)

	var resp []*{{.upperStartCamelObject}}
	{{if .withCache}}err := m.QueryRowsNoCacheCtx(ctx, &resp, query, args...){{else}}
	err := m.conn.QueryRowsCtx(ctx, &resp, query, args...)
	{{end}}
	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *default{{.upperStartCamelObject}}Model) Trans(ctx context.Context,fn func(ctx context.Context,session sqlx.Session) error) error {
	{{- if .withCache}}
	return m.TransactCtx(ctx,func(ctx context.Context,session sqlx.Session) error {
		return  fn(ctx,session)
	})
	{{- else}}
	return m.conn.TransactCtx(ctx,func(ctx context.Context,session sqlx.Session) error {
		return  fn(ctx,session)
	})
	{{- end}}
}
