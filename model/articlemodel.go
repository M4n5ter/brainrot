package model

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
)

var _ ArticleModel = (*customArticleModel)(nil)

type (
	// ArticleModel is an interface to be customized, add more methods here,
	// and implement the added methods in customArticleModel.
	ArticleModel interface {
		articleModel
		// extendedArticleModel is generated by modified model.tpl
		extendedArticleModel
		LogicDeleteByAuthorIDTitle(ctx context.Context, authorID uint64, title string) (articleID uint64, err error)
	}

	customArticleModel struct {
		*defaultArticleModel
	}
)

// NewArticleModel returns a model for the database table.
func NewArticleModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) ArticleModel {
	return &customArticleModel{
		defaultArticleModel: newArticleModel(conn, c, opts...),
	}
}

// LogicDeleteByAuthorIdTitle deletes a record from the table by author_id and title.
func (m *customArticleModel) LogicDeleteByAuthorIDTitle(ctx context.Context, authorID uint64, title string) (articleID uint64, err error) {
	data, err := m.FindOneByAuthorIdTitle(ctx, authorID, title)
	if err != nil {
		return 0, err
	}

	articleAuthorIDTitleKey := fmt.Sprintf("%s%v:%v", cacheArticleAuthorIdTitlePrefix, data.AuthorId, data.Title)
	articleIDKey := fmt.Sprintf("%s%v", cacheArticleIdPrefix, data.AuthorId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("UPDATE %s SET `status` = 0 WHERE `author_id` = ? AND `title` = ?", m.table)
		return conn.ExecCtx(ctx, query, authorID, title)
	}, articleAuthorIDTitleKey, articleIDKey)
	if err != nil {
		return 0, err
	}

	return data.Id, nil
}
