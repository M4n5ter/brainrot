package model

import (
	"context"
	"fmt"

	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
)

var _ UserModel = (*customUserModel)(nil)

type (
	// UserModel is an interface to be customized, add more methods here,
	// and implement the added methods in customUserModel.
	UserModel interface {
		userModel
		// extendedUserModel is generated by modified model.tpl
		extendedUserModel
		SearchUsers(ctx context.Context, email, username string) ([]*User, error)
	}

	customUserModel struct {
		*defaultUserModel
	}
)

// NewUserModel returns a model for the database table.
func NewUserModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) UserModel {
	return &customUserModel{
		defaultUserModel: newUserModel(conn, c, opts...),
	}
}

func (m *customUserModel) SearchUsers(ctx context.Context, email, username string) ([]*User, error) {
	query := fmt.Sprintf("SELECT %s FROM %s WHERE (`email` = ? OR `username` = ?) AND `status` = 0", userRows, m.table)
	var resp []*User
	err := m.QueryRowNoCacheCtx(ctx, &resp, query, email, username)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound: //nolint: errorlint
		return nil, ErrNotFound
	default:
		return nil, err
	}
}
