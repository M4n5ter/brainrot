// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentFieldNames          = builder.RawFieldNames(&Comment{})
	commentRows                = strings.Join(commentFieldNames, ",")
	commentRowsExpectAutoSet   = strings.Join(stringx.Remove(commentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`status`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	commentRowsWithPlaceHolder = strings.Join(stringx.Remove(commentFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`status`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCommentIdPrefix = "cache:comment:id:"
)

type (
	commentModel interface {
		Insert(ctx context.Context, data *Comment) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*Comment, error)
		Update(ctx context.Context, data *Comment) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultCommentModel struct {
		sqlc.CachedConn
		table string
	}

	Comment struct {
		Id           uint64    `db:"id"`
		ArticleId    uint64    `db:"article_id"`
		UserId       uint64    `db:"user_id"`
		Commenter    string    `db:"commenter"`
		UsefulCount  uint64    `db:"useful_count"`
		UselessCount uint64    `db:"useless_count"`
		VoterIds     string    `db:"voter_ids"`
		Content      string    `db:"content"`
		Status       int64     `db:"status"` // 1: active, 0: deleted
		CreatedAt    time.Time `db:"created_at"`
		UpdatedAt    time.Time `db:"updated_at"`
	}
)

func newCommentModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultCommentModel {
	return &defaultCommentModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`comment`",
	}
}

func (m *defaultCommentModel) Delete(ctx context.Context, id uint64) error {
	commentIdKey := fmt.Sprintf("%s%v", cacheCommentIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, commentIdKey)
	return err
}

func (m *defaultCommentModel) FindOne(ctx context.Context, id uint64) (*Comment, error) {
	commentIdKey := fmt.Sprintf("%s%v", cacheCommentIdPrefix, id)
	var resp Comment
	err := m.QueryRowCtx(ctx, &resp, commentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? AND `status` = 1 limit 1", commentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) Insert(ctx context.Context, data *Comment) (sql.Result, error) {
	commentIdKey := fmt.Sprintf("%s%v", cacheCommentIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, commentRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ArticleId, data.UserId, data.Commenter, data.UsefulCount, data.UselessCount, data.VoterIds, data.Content)
	}, commentIdKey)
	return ret, err
}

func (m *defaultCommentModel) Update(ctx context.Context, data *Comment) error {
	commentIdKey := fmt.Sprintf("%s%v", cacheCommentIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, commentRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ArticleId, data.UserId, data.Commenter, data.UsefulCount, data.UselessCount, data.VoterIds, data.Content, data.Id)
	}, commentIdKey)
	return err
}

func (m *defaultCommentModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCommentIdPrefix, primary)
}

func (m *defaultCommentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? AND `status` = 1 limit 1", commentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCommentModel) tableName() string {
	return m.table
}

// Generated by modified customized.tpl

type extendedCommentModel interface {
	Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
	LogicDelete(ctx context.Context, id uint64) error
	FindPageListByIdDESC(ctx context.Context, preMinID, pageSize uint64) ([]*Comment, error)
	FindPageListByIdASC(ctx context.Context, preMaxID, pageSize uint64) ([]*Comment, error)
}

func (m *defaultCommentModel) LogicDelete(ctx context.Context, id uint64) error {
	commentIdKey := fmt.Sprintf("%s%v", cacheCommentIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("UPDATE %s SET `status` = 0 WHERE `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, commentIdKey)
	return err
}

func (m *defaultCommentModel) FindPageListByIdDESC(ctx context.Context, preMinID, pageSize uint64) ([]*Comment, error) {
	args := []any{}
	where := " "

	if preMinID > 0 {
		where = " WHERE `id` < ? and `status` = 0"
		args = append(args, preMinID)
	}

	query := fmt.Sprintf("SELECT %s FROM %s%sORDER BY `id` DESC LIMIT ?", commentRows, m.table, where)
	args = append(args, pageSize)

	var resp []*Comment
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, args...)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) FindPageListByIdASC(ctx context.Context, preMaxID, pageSize uint64) ([]*Comment, error) {
	args := []any{}
	where := " "

	if preMaxID > 0 {
		where = " WHERE `id` > ? and `status` = 0"
		args = append(args, preMaxID)
	}

	query := fmt.Sprintf("SELECT %s FROM %s%sORDER BY `id` ASC LIMIT ?", commentRows, m.table, where)
	args = append(args, pageSize)

	var resp []*Comment
	err := m.QueryRowsNoCacheCtx(ctx, &resp, query, args...)
	switch err {
	case nil:
		return resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {
	return m.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}
