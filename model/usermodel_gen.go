// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*User, error)
		FindOneByEmail(ctx context.Context, email string) (*User, error)
		FindOneByUsername(ctx context.Context, username string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id           int64     `db:"id"`
		Username     string    `db:"username"`
		Email        string    `db:"email"`
		Password     string    `db:"password"`
		AvatarUrl    string    `db:"avatar_url"`
		Introduction string    `db:"introduction"`
		ProfileInfo  string    `db:"profile_info"`
		CreatedAt    time.Time `db:"created_at"`
		UpdatedAt    time.Time `db:"updated_at"`
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByEmail(ctx context.Context, email string) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, email)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUsername(ctx context.Context, username string) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Username, data.Email, data.Password, data.AvatarUrl, data.Introduction, data.ProfileInfo)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Username, newData.Email, newData.Password, newData.AvatarUrl, newData.Introduction, newData.ProfileInfo, newData.Id)
	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}

// Generated by modified customized.tpl

type extendedUserModel interface {
	Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
	FindPageListByIdDESC(ctx context.Context, preMinID, pageSize int64) ([]*User, error)
	FindPageListByIdASC(ctx context.Context, preMaxID, pageSize int64) ([]*User, error)
}

func (m *defaultUserModel) FindPageListByIdDESC(ctx context.Context, preMinID, pageSize int64) ([]*User, error) {
	args := []any{}
	where := " "

	if preMinID > 0 {
		where = " where id < ? "
		args = append(args, preMinID)
	}

	query := fmt.Sprintf("SELECT %s FROM %s%sORDER BY id DESC LIMIT ?", userRows, m.table, where)
	args = append(args, pageSize)

	var resp []*User

	err := m.conn.QueryRowsCtx(ctx, &resp, query, args...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindPageListByIdASC(ctx context.Context, preMaxID, pageSize int64) ([]*User, error) {
	args := []any{}
	where := " "

	if preMaxID > 0 {
		where = " where id > ? "
		args = append(args, preMaxID)
	}

	query := fmt.Sprintf("SELECT %s FROM %s%sORDER BY id ASC LIMIT ?", userRows, m.table, where)
	args = append(args, pageSize)

	var resp []*User

	err := m.conn.QueryRowsCtx(ctx, &resp, query, args...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {
	return m.conn.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})
}
